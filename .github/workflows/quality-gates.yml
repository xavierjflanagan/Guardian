name: Guardian Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: {}

env:
  NODE_VERSION: '20'

jobs:
  # Frontend quality checks
  frontend-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        run: pnpm --filter @guardian/web run typecheck

      - name: ESLint code quality
        run: pnpm --filter @guardian/web run lint

      - name: Run tests
        run: pnpm --filter @guardian/web run test --passWithNoTests

      - name: Build application
        run: pnpm --filter @guardian/web run build
        env:
          ANALYZE: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: apps/web/.next
          retention-days: 1

  performance-tests:
    runs-on: ubuntu-latest
    needs: frontend-quality
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Verify no conflicting lockfiles
        run: |
          if [ -f package-lock.json ] || [ -f yarn.lock ]; then
            echo "ERROR: Unexpected lockfile present (should use pnpm-lock.yaml only)"
            exit 1
          fi
      - run: pnpm install --frozen-lockfile
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: apps/web/.next
      - name: Build for production
        run: pnpm --filter @guardian/web run build
      - name: Start production server
        run: pnpm --filter @guardian/web run start &
        env:
          PORT: 3000
      - run: npx wait-on http://localhost:3000
      - run: pnpm dlx @lhci/cli@0.12.x autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  bundle-analysis:
    if: false
    runs-on: ubuntu-latest
    needs: frontend-quality
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Analyze bundle size
        run: pnpm --filter @guardian/web run analyze
        env:
          ANALYZE: true
      - uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: .next/analyze
          retention-days: 7
      - if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const statsPath = path.join('.next/analyze', 'bundle-analyzer-report.json');
            if (fs.existsSync(statsPath)) {
              const stats = JSON.parse(fs.readFileSync(statsPath, 'utf8'));
              const totalSize = Math.round(stats.totalSize / 1024);
              const comment = `## Bundle Size Analysis\n\n**Total Bundle Size:** ${totalSize}KB\n\n${totalSize > 1024 ? 'WARNING: Bundle size exceeds 1MB target' : 'Bundle size within limits'}\n\nView detailed analysis in the artifacts.`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: frontend-quality
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Build application
        run: pnpm --filter @guardian/web run build
      - name: Start server
        run: pnpm --filter @guardian/web run start &
        env:
          PORT: 3000
      - run: npx wait-on http://localhost:3000
      - name: Run accessibility tests
        run: |
          pnpm dlx @axe-core/cli http://localhost:3000 \
            --tags wcag2a,wcag2aa \
            --exit \
            --save accessibility-results.json
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results
          path: accessibility-results.json
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Run security audit (high severity threshold)
        run: pnpm audit --audit-level=high
      - name: Check for known vulnerabilities (non-blocking supplemental)
        run: |
          npx better-npm-audit audit --production || echo "Non-blocking: better-npm-audit reported issues"

  healthcare-compliance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: Check for PII in code (App Router paths)
        run: |
          echo "Checking for potential PII leaks..."
          PATHS=""
          for d in app components lib apps/web/app apps/web/components apps/web/lib; do
            [ -d "$d" ] && PATHS="$PATHS $d"
          done
          if [ -z "$PATHS" ]; then echo "No app paths found"; exit 0; fi
          # Refined regex to avoid false positives on legitimate medical app code
          # Excludes: database field names, authentication fields, CSS classes, legitimate medical terminology, field name arrays
          ! grep -r -i --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "(social\.security|ssn[^_a-zA-Z'\"\]]|medical\.record[^_a-zA-Z'\"\]]|date\.of\.birth|phone[^_a-zA-Z'\"\]].*[0-9]{10}|address[^_a-zA-Z'\"\]].*[0-9]|[0-9]{3}-[0-9]{2}-[0-9]{4})" $PATHS \
            --exclude="*test*" --exclude="*spec*" || \
          (echo "ERROR: Potential PII found in code" && exit 1)
          echo "SUCCESS: No PII patterns found"
      - name: Validate security headers
        run: |
          echo "Security headers validation would run here"
      - name: Check HIPAA compliance patterns
        run: |
          echo "HIPAA compliance check would run here"