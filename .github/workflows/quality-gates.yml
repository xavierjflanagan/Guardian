name: Guardian Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
<<<<<<< HEAD
=======
  workflow_dispatch: {}
>>>>>>> origin/main

env:
  NODE_VERSION: '18'

jobs:
  # Frontend quality checks
  frontend-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
<<<<<<< HEAD
      - name: Install dependencies (root)
        run: npm ci
      
      - name: TypeScript type check (apps/web)
        run: npm run -w apps/web typecheck
      
      - name: ESLint code quality (apps/web)
        run: npm run -w apps/web lint
      
      - name: Build application (apps/web)
        run: npm run -w apps/web build
=======
      - name: Install dependencies (root)
        run: npm ci
      
      - name: TypeScript type check
        run: npm run typecheck
      
      - name: ESLint code quality
        run: npm run lint
      
      - name: Build application
        run: npm run build
>>>>>>> origin/main
        env:
          ANALYZE: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
<<<<<<< HEAD
          path: apps/web/.next
=======
          path: .next
>>>>>>> origin/main
          retention-days: 1

  # Performance and accessibility testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: frontend-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
<<<<<<< HEAD
      - name: Install dependencies (root workspaces)
=======
      - name: Install dependencies (root)
>>>>>>> origin/main
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
<<<<<<< HEAD
          path: apps/web/.next
=======
          path: .next
>>>>>>> origin/main
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
      
<<<<<<< HEAD
      - name: Build for production (apps/web)
        run: npm run -w apps/web build
      
      - name: Start production server (apps/web)
        run: npm run -w apps/web start &
=======
      - name: Build for production
        run: npm run build
      
      - name: Start production server
        run: npm start &
>>>>>>> origin/main
        env:
          PORT: 3000
      
      - name: Wait for server
        run: npx wait-on http://localhost:3000
      
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Bundle size monitoring
  bundle-analysis:
    if: false  # Temporarily disabled until bundle analyzer is configured
    runs-on: ubuntu-latest
    needs: frontend-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
<<<<<<< HEAD
      - name: Install dependencies (root workspaces)
        run: npm ci
      
      - name: Analyze bundle size (apps/web)
        run: npm run -w apps/web analyze
=======
      - name: Install dependencies (root)
        run: npm ci
      
      - name: Analyze bundle size
        run: npm run analyze
>>>>>>> origin/main
        env:
          ANALYZE: true
      
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
<<<<<<< HEAD
          path: apps/web/.next/analyze
=======
          path: .next/analyze
>>>>>>> origin/main
          retention-days: 7
      
      - name: Comment bundle size
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
<<<<<<< HEAD
              const statsPath = path.join('apps/web/.next/analyze', 'bundle-analyzer-report.json');
=======
              const statsPath = path.join('.next/analyze', 'bundle-analyzer-report.json');
>>>>>>> origin/main
              if (fs.existsSync(statsPath)) {
                const stats = JSON.parse(fs.readFileSync(statsPath, 'utf8'));
                const totalSize = Math.round(stats.totalSize / 1024);
                
                const comment = `## üì¶ Bundle Size Analysis
                
                **Total Bundle Size:** ${totalSize}KB
                
                ${totalSize > 1024 ? '‚ö†Ô∏è Bundle size exceeds 1MB target' : '‚úÖ Bundle size within limits'}
                
                View detailed analysis in the artifacts.`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not analyze bundle size:', error.message);
            }

  # Accessibility testing
  accessibility-tests:
    runs-on: ubuntu-latest
    needs: frontend-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
<<<<<<< HEAD
      - name: Install dependencies (root workspaces)
        run: npm ci
      
      - name: Build application (apps/web)
        run: npm run -w apps/web build
=======
      - name: Install dependencies (root)
        run: npm ci
      
      - name: Build application
        run: npm run build
>>>>>>> origin/main
      
      - name: Install axe-core CLI
        run: npm install -g @axe-core/cli
      
<<<<<<< HEAD
      - name: Start server (apps/web)
        run: npm run -w apps/web start &
=======
      - name: Start server
        run: npm start &
>>>>>>> origin/main
        env:
          PORT: 3000
      
      - name: Wait for server
        run: npx wait-on http://localhost:3000
      
      - name: Run accessibility tests
        run: |
          axe http://localhost:3000 \
            --tags wcag2a,wcag2aa \
            --exit \
            --save accessibility-results.json
      
      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results
          path: apps/web/accessibility-results.json
          retention-days: 7

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies (root)
        run: npm ci
      
      - name: Run security audit (high severity threshold)
        run: npm audit --audit-level=high
      
      - name: Check for known vulnerabilities (non-blocking supplemental)
        run: npx better-npm-audit audit --production || echo "Non-blocking: better-npm-audit reported issues"

  # Healthcare compliance checks
  healthcare-compliance:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies (root workspaces)
        run: npm ci
      
      - name: Check for PII in code (App Router paths)
        run: |
          echo "Checking for potential PII leaks..."
          ! grep -r -i --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "(social.security|ssn|medical.record|patient.id|date.of.birth|phone|email|address|[0-9]{3}-[0-9]{2}-[0-9]{4})" app/ components/ lib/ || \
          (echo "‚ùå Potential PII found in code" && exit 1)
          echo "‚úÖ No PII patterns found"
      
      - name: Validate security headers
        run: |
          echo "Security headers validation would run here"
          # Future: Add actual security header validation
      
      - name: Check HIPAA compliance patterns
        run: |
          echo "HIPAA compliance check would run here"
          # Future: Add HIPAA-specific compliance checks