{
  "schema_version": "1.0.0",
  "table": "shell_files",
  "pass": "pass-1",
  "operation": "CREATE",
  "description": "Pass 1 CREATE operation for shell_files. Creates document container record during file upload and populates metadata from file analysis and entity detection. This is a multi-pass table: Pass 1 creates, Pass 2 may update status, Pass 3 updates synthesis fields.",

  "required_fields": [
    "patient_id",
    "filename",
    "original_filename",
    "file_size_bytes",
    "mime_type",
    "storage_path"
  ],

  "fields": {
    "patient_id": {
      "type": "uuid",
      "source": "context",
      "description": "Patient/profile who owns this file",
      "required": true,
      "example": "uuid-from-upload-context",
      "guidance": "References user_profiles(id) ON DELETE CASCADE. From upload context - which patient this file belongs to."
    },

    "filename": {
      "type": "string",
      "description": "Generated filename for storage",
      "required": true,
      "examples": ["medical_record_20250101_123456.pdf", "lab_results_20250115_093022.jpg"],
      "guidance": "System-generated unique filename including timestamp. NOT NULL. Used for object storage identification."
    },

    "original_filename": {
      "type": "string",
      "description": "User's original uploaded filename",
      "required": true,
      "examples": ["Dr_Smith_Visit_2025.pdf", "Blood_Test_Results.jpg"],
      "guidance": "Preserve original filename for user reference. NOT NULL. Display to user in UI."
    },

    "file_size_bytes": {
      "type": "integer",
      "description": "File size in bytes",
      "required": true,
      "examples": [2458624, 1245680, 524288],
      "guidance": "BIGINT type. Must be non-negative. Required for storage quota and cost tracking."
    },

    "mime_type": {
      "type": "string",
      "description": "File MIME type",
      "required": true,
      "examples": ["application/pdf", "image/jpeg", "image/png"],
      "guidance": "Standard MIME type string. NOT NULL. Determines processing pipeline (PDF vs image)."
    },

    "storage_path": {
      "type": "string",
      "description": "Object storage path",
      "required": true,
      "examples": ["medical-docs/patient-uuid/medical_record_20250101_123456.pdf"],
      "guidance": "Full path in object storage bucket. NOT NULL. Used for file retrieval."
    },

    "status": {
      "type": "enum",
      "values": ["uploaded", "processing", "completed", "failed", "archived"],
      "description": "Processing status",
      "required": false,
      "default": "uploaded",
      "examples": ["processing", "completed", "failed"],
      "guidance": "NOT NULL with default 'uploaded'. Pass 1 sets to 'processing' during entity detection, then 'completed' or 'failed'. Pass 2 may update to 'completed' after enrichment."
    },

    "processing_started_at": {
      "type": "timestamptz",
      "description": "When Pass 1 processing started",
      "required": false,
      "examples": ["2025-01-01T12:34:56Z", "2025-01-15T09:30:22Z"],
      "guidance": "TIMESTAMPTZ. Set when Pass 1 begins entity detection. ISO 8601 format with timezone."
    },

    "processing_completed_at": {
      "type": "timestamptz",
      "description": "When Pass 1 processing completed",
      "required": false,
      "examples": ["2025-01-15T09:31:45Z"],
      "guidance": "TIMESTAMPTZ. Set when Pass 1 finishes (success or failure). ISO 8601 format with timezone."
    },

    "processing_error": {
      "type": "jsonb",
      "description": "Error details if processing failed",
      "required": false,
      "examples": [
        {"error_code": "OCR_FAILURE", "error_message": "Document quality too low", "retry_count": 3, "can_retry": false}
      ],
      "guidance": "JSONB object. Only populated if status='failed'. Include error_code, error_message, retry_count, can_retry."
    },

    "file_type": {
      "type": "enum",
      "values": ["medical_record", "lab_result", "imaging_report", "prescription", "discharge_summary", "referral", "insurance_card", "id_document", "other"],
      "description": "Document type classification",
      "required": false,
      "examples": ["medical_record", "lab_result", "prescription"],
      "guidance": "Pass 1 AI vision determines document type. 9 allowed values. Helps route to appropriate processing pipeline."
    },

    "file_subtype": {
      "type": "string",
      "description": "More specific document subtype",
      "required": false,
      "examples": ["general_practitioner_visit", "blood_test", "medication_prescription"],
      "guidance": "Optional refinement of file_type. Free text - no constraints. AI-determined."
    },

    "confidence_score": {
      "type": "numeric",
      "precision": 3,
      "scale": 2,
      "description": "AI confidence in file_type classification",
      "required": false,
      "examples": [0.92, 0.95, 0.75],
      "guidance": "NUMERIC(3,2) - 2 decimal places, 0.00-0.99 range. Higher = more confident classification."
    },

    "extracted_text": {
      "type": "string",
      "description": "Full text extracted via OCR",
      "required": false,
      "examples": ["[Full OCR text content from document...]"],
      "guidance": "TEXT field. Can be very large. Contains all text extracted by OCR during Pass 1. Used for entity detection."
    },

    "ocr_confidence": {
      "type": "numeric",
      "precision": 3,
      "scale": 2,
      "description": "Average OCR confidence across document",
      "required": false,
      "examples": [0.88, 0.91, 0.35],
      "guidance": "NUMERIC(3,2) - 2 decimal places. Average confidence from OCR engine. Low values (<0.60) indicate poor quality scan."
    },

    "page_count": {
      "type": "integer",
      "description": "Number of pages in document",
      "required": false,
      "default": 1,
      "examples": [4, 1, 12],
      "guidance": "INTEGER. Defaults to 1. Extracted from PDF or detected from multi-page image."
    },

    "processing_job_id": {
      "type": "uuid",
      "description": "Job queue reference",
      "required": false,
      "examples": ["uuid-of-job"],
      "guidance": "References job_queue table (from 08_job_coordination.sql). Optional - only if using job queue system."
    },

    "processing_worker_id": {
      "type": "string",
      "description": "Worker that processed this file",
      "required": false,
      "examples": ["worker-01", "worker-02"],
      "guidance": "VARCHAR(100). Identifies which processing worker handled this file. Useful for debugging and load balancing."
    },

    "processing_priority": {
      "type": "integer",
      "description": "Processing priority",
      "required": false,
      "default": 100,
      "examples": [100, 50, 200],
      "guidance": "INTEGER. Lower = higher priority. Defaults to 100. Used by job queue for processing order."
    },

    "idempotency_key": {
      "type": "string",
      "description": "Prevents duplicate processing",
      "required": false,
      "examples": ["upload-uuid-patient-uuid-timestamp"],
      "guidance": "Unique TEXT field. Prevents duplicate file uploads. Database has unique index on this field."
    },

    "processing_cost_estimate": {
      "type": "numeric",
      "precision": 10,
      "scale": 4,
      "description": "Estimated processing cost in USD",
      "required": false,
      "default": 0,
      "examples": [0.0125, 0.0096],
      "guidance": "DECIMAL(10,4) - up to $9,999.9999 with 4 decimal places. Pass 1 populates with OCR/vision costs. Pass 2 adds enrichment costs."
    },

    "processing_duration_seconds": {
      "type": "integer",
      "description": "Actual processing time in seconds",
      "required": false,
      "examples": [83, 120, 45],
      "guidance": "INTEGER. Time from processing_started_at to processing_completed_at in seconds. Performance tracking."
    },

    "language_detected": {
      "type": "string",
      "description": "Detected document language",
      "required": false,
      "default": "en",
      "examples": ["en", "es", "fr"],
      "guidance": "TEXT. ISO language code. Defaults to 'en'. AI vision can detect non-English documents."
    },

    "provider_name": {
      "type": "string",
      "description": "Healthcare provider name extracted from document",
      "required": false,
      "examples": ["Dr. Jane Smith", "Pathology Lab Australia"],
      "guidance": "TEXT. Extracted from document header/footer if visible. Optional - may not be present."
    },

    "facility_name": {
      "type": "string",
      "description": "Healthcare facility name extracted from document",
      "required": false,
      "examples": ["Sydney Medical Centre", "Melbourne Pathology Centre"],
      "guidance": "TEXT. Extracted from document if visible. Optional - may not be present."
    },

    "upload_context": {
      "type": "string",
      "description": "User-provided context about upload",
      "required": false,
      "examples": ["Regular checkup visit", "Annual physical"],
      "guidance": "TEXT. User can provide context when uploading. Optional."
    },

    "processed_image_path": {
      "type": "string",
      "description": "Phase 2: Storage path for downscaled image",
      "required": false,
      "examples": ["medical-docs/patient-uuid/processed/medical_record_20250101_123456_1600px.jpg"],
      "guidance": "TEXT. Phase 2 optimization: path to downscaled image used for OCR and Pass 1+. CHECK constraint: 1-2048 characters."
    },

    "processed_image_checksum": {
      "type": "string",
      "description": "Phase 2: SHA256 checksum of processed image",
      "required": false,
      "examples": ["a3f5b9c2d1e4..."],
      "guidance": "TEXT. SHA256 hash for idempotency - prevents redundant downscaling if image already processed."
    },

    "processed_image_mime": {
      "type": "string",
      "description": "Phase 2: MIME type of processed image",
      "required": false,
      "examples": ["image/jpeg", "image/png"],
      "guidance": "TEXT. May differ from original mime_type (PNG→PNG, JPEG optimized, TIFF/PDF pass-through)."
    },

    "ai_synthesized_summary": {
      "type": "string",
      "description": "Pass 3 field - intelligent overview (NOT Pass 1)",
      "required": false,
      "default": null,
      "guidance": "TEXT. Pass 1 leaves this NULL. Pass 3 populates with AI-generated summary of all narratives."
    },

    "narrative_count": {
      "type": "integer",
      "description": "Pass 3 field - narrative count (NOT Pass 1)",
      "required": false,
      "default": 0,
      "guidance": "INTEGER. Pass 1 defaults to 0. Pass 3 updates with number of clinical narratives created."
    },

    "synthesis_completed_at": {
      "type": "timestamptz",
      "description": "Pass 3 field - synthesis timestamp (NOT Pass 1)",
      "required": false,
      "default": null,
      "guidance": "TIMESTAMPTZ. Pass 1 leaves this NULL. Pass 3 sets when synthesis completes."
    }
  },

  "extraction_guidelines": {
    "pass1_operation": "CREATE new shell_files record during file upload",
    "required_fields_strict": "All 6 required fields (patient_id, filename, original_filename, file_size_bytes, mime_type, storage_path) must be provided",
    "status_default": "status defaults to 'uploaded' but is NOT NULL - always provide value",
    "pass3_fields_null": "ai_synthesized_summary, narrative_count, synthesis_completed_at must remain NULL/0 - Pass 3 will update",
    "timestamps": "Set processing_started_at when beginning Pass 1, processing_completed_at when finishing",
    "error_handling": "If processing fails, set status='failed' and populate processing_error JSONB",
    "file_classification": "file_type and confidence_score determined by AI vision analysis",
    "ocr_extraction": "extracted_text and ocr_confidence populated from OCR engine results",
    "metadata_extraction": "provider_name and facility_name extracted if visible in document"
  },

  "validation_rules": {
    "patient_id": "Must be valid UUID (NOT NULL)",
    "filename": "Must be provided (NOT NULL)",
    "original_filename": "Must be provided (NOT NULL)",
    "file_size_bytes": "Must be non-negative BIGINT (NOT NULL)",
    "mime_type": "Must be provided (NOT NULL)",
    "storage_path": "Must be provided (NOT NULL)",
    "status": "Must be one of 5 enum values (NOT NULL, defaults to 'uploaded')",
    "file_type": "If provided, must be one of 9 enum values",
    "confidence_score": "If provided, must be 0.00-0.99 with 2 decimal places",
    "ocr_confidence": "If provided, must be 0.00-0.99 with 2 decimal places",
    "page_count": "If provided, must be positive integer",
    "processing_cost_estimate": "If provided, must be non-negative with max 4 decimal places",
    "language_detected": "Defaults to 'en' if not provided"
  }
}
