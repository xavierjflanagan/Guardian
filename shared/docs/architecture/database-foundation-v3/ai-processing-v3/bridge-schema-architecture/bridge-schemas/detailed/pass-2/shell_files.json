{
  "schema_version": "1.0.0",
  "table": "shell_files",
  "pass": "pass-2",
  "operation": "UPDATE",
  "description": "Pass 2 UPDATE operation for shell_files. Updates existing record (created by Pass 1) to mark clinical enrichment as complete. Primary responsibility: update status to 'completed' or 'failed' and accumulate Pass 2 costs.",

  "fields_updated_by_pass2": {
    "status": {
      "type": "enum",
      "values": ["completed", "failed"],
      "description": "Update processing status after clinical enrichment",
      "required": false,
      "examples": ["completed", "failed"],
      "guidance": "Update from 'processing' to 'completed' after successful enrichment, or 'failed' on error. NOT NULL field, so must provide value when changing status."
    },

    "processing_completed_at": {
      "type": "timestamptz",
      "description": "Completion timestamp",
      "required": false,
      "examples": ["2025-01-01T12:36:22Z"],
      "guidance": "Set if Pass 1 didn't already set it. Use COALESCE(processing_completed_at, NOW()) to avoid overwriting existing timestamp. ISO 8601 with timezone."
    },

    "processing_cost_estimate": {
      "type": "numeric",
      "precision": 10,
      "scale": 4,
      "description": "Accumulated processing cost",
      "required": false,
      "examples": [0.0325, 0.0185],
      "guidance": "DECIMAL(10,4). ADD Pass 2 costs to existing Pass 1 value - do not replace. Example: processing_cost_estimate = processing_cost_estimate + 0.0200"
    },

    "processing_duration_seconds": {
      "type": "integer",
      "description": "Total processing duration",
      "required": false,
      "examples": [146, 210],
      "guidance": "Calculate total time from processing_started_at to completion. EXTRACT(EPOCH FROM (NOW() - processing_started_at))::INTEGER"
    },

    "processing_error": {
      "type": "jsonb",
      "description": "Error details if Pass 2 failed",
      "required": false,
      "examples": [
        {
          "error_code": "ENRICHMENT_FAILURE",
          "error_message": "Unable to classify clinical entities",
          "pass": "pass-2",
          "retry_count": 2,
          "can_retry": true
        }
      ],
      "guidance": "JSONB object. Only populate if status='failed'. Include error_code, error_message, pass='pass-2', retry_count, can_retry."
    }
  },

  "fields_not_modified_by_pass2": {
    "pass1_ownership": [
      "patient_id", "filename", "original_filename", "file_size_bytes", "mime_type", "storage_path",
      "file_type", "file_subtype", "confidence_score", "extracted_text", "ocr_confidence", "page_count",
      "processing_started_at", "processing_job_id", "processing_worker_id", "processing_priority",
      "idempotency_key", "language_detected", "provider_name", "facility_name", "upload_context",
      "processed_image_path", "processed_image_checksum", "processed_image_mime"
    ],
    "pass3_ownership": [
      "ai_synthesized_summary", "narrative_count", "synthesis_completed_at"
    ],
    "note": "Phase 2 optimization fields (processed_image_*) are written by Pass 1 worker, not modified by Pass 2"
  },

  "examples": [
    {
      "description": "Successful clinical enrichment completion",
      "update": {
        "status": "completed",
        "processing_completed_at": "2025-01-01T12:36:22Z",
        "processing_cost_estimate": 0.0325,
        "processing_duration_seconds": 146
      }
    },
    {
      "description": "Clinical enrichment failed",
      "update": {
        "status": "failed",
        "processing_completed_at": "2025-01-15T09:32:10Z",
        "processing_error": {
          "error_code": "ENRICHMENT_FAILURE",
          "error_message": "Unable to classify clinical entities - low confidence across all detected entities",
          "pass": "pass-2",
          "retry_count": 2,
          "can_retry": true
        },
        "processing_cost_estimate": 0.0185
      }
    },
    {
      "description": "Minimal update (status only)",
      "update": {
        "status": "completed"
      }
    }
  ],

  "update_guidelines": {
    "operation": "UPDATE existing shell_files record (Pass 1 created it)",
    "primary_responsibility": "Update status to 'completed' or 'failed' after clinical enrichment",
    "cost_accumulation": "ADD Pass 2 costs to Pass 1 costs - do not replace. Use: processing_cost_estimate = processing_cost_estimate + pass2_cost",
    "timestamp_safety": "Use COALESCE(processing_completed_at, NOW()) to avoid overwriting existing timestamp",
    "idempotency": "UPDATE should be idempotent - safe to retry. Use WHERE status = 'processing' guard",
    "minimal_updates_allowed": "Can update just status='completed' if that's all needed",
    "pass1_fields_readonly": "Do NOT modify any Pass 1 fields (file metadata, classification, OCR results)",
    "pass3_fields_readonly": "Do NOT modify any Pass 3 fields (ai_synthesized_summary, narrative_count, synthesis_completed_at)",
    "error_handling": "If Pass 2 fails, set status='failed' and populate processing_error with pass='pass-2'"
  },

  "validation_rules": {
    "status": "If updated, must be 'completed' or 'failed'",
    "processing_completed_at": "If updated, must be valid TIMESTAMPTZ",
    "processing_cost_estimate": "If updated, must ADD to existing value (not replace)",
    "processing_duration_seconds": "If updated, must be positive integer",
    "processing_error": "If populated, must be valid JSONB with pass='pass-2'",
    "pass1_fields": "Must NOT be modified by Pass 2",
    "pass3_fields": "Must NOT be modified by Pass 2"
  },

  "sql_update_pattern": {
    "example": "UPDATE shell_files SET status = 'completed', processing_completed_at = COALESCE(processing_completed_at, NOW()), processing_cost_estimate = processing_cost_estimate + 0.0200, processing_duration_seconds = EXTRACT(EPOCH FROM (NOW() - processing_started_at))::INTEGER, updated_at = NOW() WHERE id = $1 AND status = 'processing';"
  }
}
