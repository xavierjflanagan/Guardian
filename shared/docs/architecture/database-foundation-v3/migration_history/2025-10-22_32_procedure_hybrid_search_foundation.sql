-- ============================================================================
-- Migration: Procedure Hybrid Search Foundation (Phase 1: Database Layer)
-- Date: 2025-10-22
-- Migration Number: 32
-- Issue: OpenAI embeddings insufficient for MBS procedure matching
--
-- PROBLEM:
--   Experiment 5 validated that OpenAI text-embedding-3-small is INSUFFICIENT
--   for MBS procedure matching. 13/35 test entities (37.1%) returned zero results
--   despite correct codes existing in database. Root cause: semantic terminology
--   mismatch between casual medical language and formal MBS descriptions.
--
--   Critical failures:
--   - "Cholecystectomy" (exact term) → similarity < 0.0 (catastrophic)
--   - "Chest X-ray" variations → failed to match "direct radiography"
--   - "CT scan head" → failed "CT" → "Computed tomography", "head" → "brain"
--
-- SOLUTION:
--   Implement hybrid search (Lexical 70% + Semantic 30%) with AI-generated
--   search variants. This migration adds database foundation:
--   1. Add search_variants column to entity_processing_audit (Pass 1 output)
--   2. Create search_procedures_hybrid() function for lexical+semantic search
--
--   Future migrations will handle Pass 1 worker enhancement and routing.
--
-- AFFECTED TABLES:
--   - entity_processing_audit (ADD COLUMN search_variants)
--   - regional_medical_codes (ADD 2 INDEXES for performance, READ for queries)
--
-- AFFECTED FUNCTIONS:
--   - search_procedures_hybrid (NEW - hybrid lexical + semantic search)
--
-- SOURCE OF TRUTH SCHEMA UPDATED:
--   [X] 04_ai_processing.sql (Line 348-349: entity_processing_audit table, add search_variants column)
--   [X] 03_clinical_core.sql (Lines 2010-2184: add search_procedures_hybrid function)
--   [X] 07_optimization.sql (Lines 425-436: Add 2 performance indexes: idx_rmc_normalized_text_trgm, idx_rmc_mbs_proc_active)
--
-- DOWNSTREAM UPDATES:
--   [ ] Pass 1 worker TypeScript types (add search_variants to entity output) - FUTURE PHASE
--   [ ] Pass 1.5 worker routing logic (procedure fork to hybrid search) - FUTURE PHASE
--
-- PROCESSING DATE: 2025-10-22
-- ============================================================================

BEGIN;

-- Prerequisites: required extensions
CREATE EXTENSION IF NOT EXISTS vector;
CREATE EXTENSION IF NOT EXISTS pg_trgm;

-- ============================================================================
-- PART 1: Add search_variants column to entity_processing_audit
-- ============================================================================
-- Purpose: Store AI-generated search term variants for hybrid code matching
-- Used by: Pass 1.5 hybrid search for procedures (and eventually all entity types)
-- Max variants: 5 per entity (configurable in Pass 1 prompt)

ALTER TABLE entity_processing_audit
ADD COLUMN IF NOT EXISTS search_variants TEXT[];

COMMENT ON COLUMN entity_processing_audit.search_variants IS
'AI-generated array of search term variants for hybrid medical code matching (max 5).
Includes: synonyms, abbreviations, formatting variations, medical terminology.
Example: "Chest X-ray" → ["chest x-ray", "chest radiography", "CXR", "thoracic radiograph", "lung fields x-ray"]
Generated by: Pass 1 entity detection AI (GPT-4o Vision)
Used by: Pass 1.5 hybrid search functions (search_procedures_hybrid, future: search_medications_hybrid)
Status: Optional field - NULL for entities processed before this migration';

-- ============================================================================
-- PART 1B: Performance Indexes for Hybrid Search
-- ============================================================================
-- Purpose: Optimize ILIKE performance and filter predicate scanning
-- Impact: Critical for sub-500ms query performance on 6,001 MBS codes

-- Trigram index for ILIKE text matching on normalized_embedding_text
-- Enables fast fuzzy matching for hybrid search lexical phase
CREATE INDEX IF NOT EXISTS idx_rmc_normalized_text_trgm
ON regional_medical_codes USING gin (normalized_embedding_text gin_trgm_ops)
WHERE code_system = 'mbs' AND entity_type = 'procedure' AND active = TRUE;

-- Composite B-tree index for filter predicates
-- Covers common WHERE clause filters to avoid sequential scans
CREATE INDEX IF NOT EXISTS idx_rmc_mbs_proc_active
ON regional_medical_codes (code_system, entity_type, active, country_code)
WHERE code_system = 'mbs' AND entity_type = 'procedure' AND active = TRUE;

-- ============================================================================
-- PART 2: Create search_procedures_hybrid() function
-- ============================================================================
-- Purpose: Hybrid search for MBS procedure codes (Lexical 70% + Semantic 30%)
-- Strategy:
--   1. Lexical Phase (70%): Fast ILIKE matching on search_variants array
--   2. Semantic Phase (30%): OpenAI embedding reranking of lexical results
--   3. Weighted Combination: Normalized scores combined for final ranking
--
-- Parameters:
--   p_entity_text: Original entity text from Pass 1
--   p_search_variants: AI-generated variant array (max 5)
--   p_country_code: Country filter (default 'AUS')
--   p_limit: Max results to return (default 20)
--
-- Returns: Ranked procedure codes with lexical, semantic, and combined scores

CREATE OR REPLACE FUNCTION search_procedures_hybrid(
    p_entity_text TEXT,
    p_search_variants TEXT[],
    p_country_code CHAR(3) DEFAULT 'AUS',
    p_limit INTEGER DEFAULT 20
)
RETURNS TABLE (
    code_value VARCHAR(50),
    display_name TEXT,
    lexical_score NUMERIC,
    semantic_score NUMERIC,
    combined_score NUMERIC,
    match_source TEXT,
    code_system VARCHAR(20),
    search_text TEXT
) AS $$
DECLARE
    v_query_embedding VECTOR(1536);
    v_variant_count INTEGER;
    v_normalized_variants TEXT[];
BEGIN
    -- Step 0: Validate and normalize inputs
    IF p_search_variants IS NULL OR array_length(p_search_variants, 1) = 0 THEN
        RAISE EXCEPTION 'search_variants array is required and must not be empty';
    END IF;

    IF p_entity_text IS NULL OR trim(p_entity_text) = '' THEN
        RAISE EXCEPTION 'p_entity_text is required and must not be empty';
    END IF;

    -- Normalize: trim whitespace from all variants to prevent accidental mismatches
    SELECT array_agg(trim(v)) INTO v_normalized_variants
    FROM unnest(p_search_variants) AS v;

    -- Enforce 5-variant cap (silent truncation to match documented max)
    IF array_length(v_normalized_variants, 1) > 5 THEN
        v_normalized_variants := v_normalized_variants[1:5];
    END IF;

    v_variant_count := array_length(v_normalized_variants, 1);

    -- Step 1: Get embedding for semantic phase
    -- TODO (Phase 2): Pass precomputed entity embedding from Pass 1 to eliminate proxy bias
    -- Current approach uses FIRST matching code's embedding as proxy for semantic reranking
    -- This is acceptable for Phase 1 (semantic only 30% weight, lexical already filtered)
    SELECT embedding INTO v_query_embedding
    FROM regional_medical_codes
    WHERE code_system = 'mbs'
        AND country_code = p_country_code
        AND active = TRUE
        AND entity_type = 'procedure'
        AND embedding IS NOT NULL
        AND (
            normalized_embedding_text ILIKE '%' || v_normalized_variants[1] || '%' OR
            normalized_embedding_text ILIKE '%' || p_entity_text || '%'
        )
    LIMIT 1;

    -- If no embedding found, fall back to zero vector (lexical-only mode)
    IF v_query_embedding IS NULL THEN
        v_query_embedding := array_fill(0::float4, ARRAY[1536])::VECTOR(1536);
    END IF;

    -- Step 2: Lexical matching with variant scoring
    -- Earlier variants get higher scores (assume AI ranks by relevance)
    RETURN QUERY
    WITH lexical_matches AS (
        SELECT
            rmc.code_value,
            rmc.display_name,
            rmc.code_system,
            rmc.search_text,
            rmc.normalized_embedding_text,
            rmc.embedding,
            -- Score based on which variant matched (1.0 for first, 0.8 for last)
            GREATEST(
                CASE WHEN normalized_embedding_text ILIKE '%' || v_normalized_variants[1] || '%' THEN 1.00 ELSE 0 END,
                CASE WHEN v_variant_count >= 2 AND normalized_embedding_text ILIKE '%' || v_normalized_variants[2] || '%' THEN 0.95 ELSE 0 END,
                CASE WHEN v_variant_count >= 3 AND normalized_embedding_text ILIKE '%' || v_normalized_variants[3] || '%' THEN 0.90 ELSE 0 END,
                CASE WHEN v_variant_count >= 4 AND normalized_embedding_text ILIKE '%' || v_normalized_variants[4] || '%' THEN 0.85 ELSE 0 END,
                CASE WHEN v_variant_count >= 5 AND normalized_embedding_text ILIKE '%' || v_normalized_variants[5] || '%' THEN 0.80 ELSE 0 END
            ) AS raw_lexical_score
        FROM regional_medical_codes rmc
        WHERE rmc.code_system = 'mbs'
            AND rmc.country_code = p_country_code
            AND rmc.active = TRUE
            AND rmc.entity_type = 'procedure'
            AND (
                normalized_embedding_text ILIKE '%' || v_normalized_variants[1] || '%' OR
                (v_variant_count >= 2 AND normalized_embedding_text ILIKE '%' || v_normalized_variants[2] || '%') OR
                (v_variant_count >= 3 AND normalized_embedding_text ILIKE '%' || v_normalized_variants[3] || '%') OR
                (v_variant_count >= 4 AND normalized_embedding_text ILIKE '%' || v_normalized_variants[4] || '%') OR
                (v_variant_count >= 5 AND normalized_embedding_text ILIKE '%' || v_normalized_variants[5] || '%')
            )
    ),

    -- Step 3: Semantic reranking on lexical candidates
    semantic_rerank AS (
        SELECT
            lm.code_value,
            lm.display_name,
            lm.code_system,
            lm.search_text,
            lm.raw_lexical_score,
            -- Cosine similarity (1 - distance)
            CASE
                WHEN lm.embedding IS NOT NULL
                THEN GREATEST(0, 1 - (lm.embedding <=> v_query_embedding))
                ELSE 0
            END AS raw_semantic_score
        FROM lexical_matches lm
        WHERE lm.raw_lexical_score > 0
    ),

    -- Step 4: Normalize and combine scores
    normalized_scores AS (
        SELECT
            code_value,
            display_name,
            code_system,
            search_text,
            raw_lexical_score,
            raw_semantic_score,
            -- Normalize lexical score (already 0-1 range from variant scoring)
            raw_lexical_score AS norm_lexical,
            -- Normalize semantic score (0-1 range)
            CASE
                WHEN MAX(raw_semantic_score) OVER () > 0
                THEN raw_semantic_score / NULLIF(MAX(raw_semantic_score) OVER (), 0)
                ELSE 0
            END AS norm_semantic
        FROM semantic_rerank
    )

    -- Final weighted combination: 70% lexical + 30% semantic
    SELECT
        ns.code_value,
        ns.display_name,
        ns.norm_lexical AS lexical_score,
        ns.norm_semantic AS semantic_score,
        (ns.norm_lexical * 0.70 + ns.norm_semantic * 0.30) AS combined_score,
        CASE
            WHEN ns.norm_lexical >= 0.9 THEN 'lexical_primary'
            WHEN ns.norm_semantic >= 0.8 THEN 'semantic_primary'
            ELSE 'hybrid'
        END AS match_source,
        ns.code_system,
        ns.search_text
    FROM normalized_scores ns
    ORDER BY combined_score DESC
    LIMIT p_limit;

END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER SET search_path = public, pg_temp;

COMMENT ON FUNCTION search_procedures_hybrid(TEXT, TEXT[], CHAR(3), INTEGER) IS
'Hybrid search for MBS procedure codes using AI-generated search variants.
Strategy: Lexical matching (70%) + Semantic reranking (30%)
Validated: Experiment 5 (October 2025) - OpenAI pure vector insufficient
Usage: Pass 1.5 procedure code matching (replaces pure vector search)
Example:
  SELECT * FROM search_procedures_hybrid(
    ''Chest X-ray'',
    ARRAY[''chest x-ray'', ''chest radiography'', ''CXR'', ''thoracic radiograph'', ''lung fields x-ray''],
    ''AUS'',
    20
  );';

-- ============================================================================
-- PART 3: Security - Function Access Control
-- ============================================================================
-- Purpose: Restrict function execution to authorized worker service role
-- Pattern: Follows 08_job_coordination.sql security model

REVOKE ALL ON FUNCTION search_procedures_hybrid(TEXT, TEXT[], CHAR(3), INTEGER) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION search_procedures_hybrid(TEXT, TEXT[], CHAR(3), INTEGER) TO service_role;

COMMIT;

-- ============================================================================
-- VERIFICATION QUERIES
-- ============================================================================
-- Process these after migration to confirm successful processing

-- 1. Verify search_variants column exists
-- SELECT column_name, data_type, is_nullable
-- FROM information_schema.columns
-- WHERE table_name = 'entity_processing_audit' AND column_name = 'search_variants';

-- 2. Verify function exists and permissions
-- SELECT routine_name, routine_type
-- FROM information_schema.routines
-- WHERE routine_name = 'search_procedures_hybrid';

-- 2b. Verify function permissions (should only be service_role)
-- SELECT grantee, privilege_type
-- FROM information_schema.routine_privileges
-- WHERE routine_name = 'search_procedures_hybrid';

-- 2c. Verify indexes created
-- SELECT indexname, indexdef
-- FROM pg_indexes
-- WHERE tablename = 'regional_medical_codes'
-- AND indexname IN ('idx_rmc_normalized_text_trgm', 'idx_rmc_mbs_proc_active');

-- 3. Test hybrid search with Experiment 5 test case (Chest X-ray)
-- SELECT code_value, display_name, lexical_score, semantic_score, combined_score, match_source
-- FROM search_procedures_hybrid(
--     'Chest X-ray',
--     ARRAY['chest x-ray', 'chest radiography', 'CXR', 'thoracic radiograph', 'lung fields x-ray'],
--     'AUS',
--     10
-- );
-- Expected: Should return codes 58500, 58503, 58506 (vs pure vector: 0 results)

-- 4. Test with Cholecystectomy (exact term match - catastrophic failure in pure vector)
-- SELECT code_value, display_name, lexical_score, semantic_score, combined_score, match_source
-- FROM search_procedures_hybrid(
--     'Cholecystectomy',
--     ARRAY['cholecystectomy', 'gallbladder removal', 'laparoscopic cholecystectomy', 'gall bladder surgery'],
--     'AUS',
--     10
-- );
-- Expected: Should return codes 30443, 30445, 30448 (vs pure vector: 0 results)

-- ============================================================================
-- ROLLBACK SCRIPT (if needed)
-- ============================================================================
-- Execute in reverse order of migration

-- Drop function and revoke permissions
-- DROP FUNCTION IF EXISTS search_procedures_hybrid(TEXT, TEXT[], CHAR(3), INTEGER);

-- Drop performance indexes
-- DROP INDEX IF EXISTS idx_rmc_normalized_text_trgm;
-- DROP INDEX IF EXISTS idx_rmc_mbs_proc_active;

-- Drop column
-- ALTER TABLE entity_processing_audit DROP COLUMN IF EXISTS search_variants;
