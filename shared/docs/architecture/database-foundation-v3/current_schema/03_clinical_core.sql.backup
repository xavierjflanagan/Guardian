-- =============================================================================
-- 03_CLINICAL_CORE.SQL - V3 Semantic Document Architecture & Clinical Data Hub
-- =============================================================================
-- VERSION: 2.0 (MAJOR UPDATE 2025-09-26: Migration Integration)
--   - Added temporal data management enhancements (from migration 02)
--   - Added narrative vector embeddings and versioning (from migration 03)
--   - Added medical code resolution system (from migration 04)
--   - Integrated all successfully deployed migration components
-- PREVIOUS: 1.1 (HOTFIX 2025-09-02: GPT-5 reliability fixes)
--   - Added is_admin() dependency check in preflight validation
--   - Made fk_clinical_events_encounter constraint addition idempotent
-- Purpose: V3 semantic document architecture with shell files + clinical narratives + comprehensive clinical data management
-- Architecture: Revolutionary semantic processing that eliminates dangerous multi-document context mixing while enabling clinical storytelling
-- Dependencies: 01_foundations.sql (audit, ENUMs), 02_profiles.sql (user_profiles, has_profile_access)
-- 
-- DESIGN DECISIONS:
-- - V3 Semantic Architecture: Shell files (physical containers) + clinical narratives (AI-generated medical storylines)
-- - Multi-document safety: Prevents dangerous context mixing by maintaining document boundaries
-- - Clinical narrative coherence: AI-determined storylines can span non-contiguous pages within single documents
-- - Medical coding integration: ICD-10, SNOMED-CT, RxNorm, Australian PBS/Medicare integration
-- - Two-axis clinical classification: Timeline events + specialized clinical data types
-- - Narrative linking system: 5 junction tables connecting narratives to clinical concepts
-- - Job coordination ready: Integration with V3 job queue system for async processing
-- - Business analytics: Processing cost estimation and duration tracking
-- 
-- TABLES CREATED (28 tables):
-- Note: medical_condition_codes and medication_reference removed in migration 06 (vestigial cleanup)
-- V3 Semantic Architecture (9 tables):
--   - shell_files, clinical_narratives
--   - narrative_event_links (generic), narrative_source_mappings
--   - narrative_relationships, narrative_event_links (added from migration 03)
-- Clinical Data Hub (10 tables):
--   - patient_clinical_events, patient_observations, patient_interventions
--   - healthcare_encounters, healthcare_timeline_events
--   - patient_conditions, patient_allergies, patient_vitals, patient_immunizations, patient_medications
-- Temporal Data Management (3 tables from migration 02):
--   - temporal_audit_log, identity_audit_log, temporal_processing_log
-- Medical Code Resolution (4 tables from migration 04):
--   - universal_medical_codes, regional_medical_codes, medical_code_assignments, code_resolution_log
-- Analytics (2 materialized views):
--   - temporal_data_summary, supersession_chains_summary
-- 
-- KEY INNOVATIONS:
-- - shell_files.ai_synthesized_summary: Post-Pass 3 synthesis replaces primitive document intelligence
-- - clinical_narratives.source_page_ranges: Enables non-contiguous page narrative spanning
-- - clinical_narratives.semantic_coherence_score: AI validation of narrative clinical coherence
-- - Narrative linking system: Rich connections between AI narratives and structured clinical data
-- - V3 job coordination integration: processing_job_id, processing_worker_id for async processing
-- 
-- INTEGRATION POINTS:
-- - Provides shell_files table for V3 Edge Functions (shell-file-processor-v3)
-- - Clinical narratives activate smart health features (pregnancy, chronic conditions)
-- - Medical coding tables support clinical decision support and billing
-- - Patient clinical events feed healthcare provider dashboards
-- - All tables use correct patient_id -> user_profiles(id) V3 architecture
-- =============================================================================

BEGIN;

-- Verification that dependencies exist
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'user_profiles') THEN
        RAISE EXCEPTION 'DEPENDENCY ERROR: user_profiles table not found. Run 02_profiles.sql first.';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'has_profile_access') THEN
        RAISE EXCEPTION 'DEPENDENCY ERROR: has_profile_access() function not found. Run 02_profiles.sql first.';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'is_admin') THEN
        RAISE EXCEPTION 'DEPENDENCY ERROR: is_admin() function not found. Run 01_foundations.sql first.';
    END IF;
    
    RAISE NOTICE 'Dependencies verified: user_profiles table and has_profile_access() function exist';
END $$;

-- =============================================================================
-- SECTION 1: MEDICAL CODING REFERENCE (REMOVED)
-- =============================================================================
-- Note: medical_condition_codes and medication_reference tables removed in migration 06
-- These were vestigial empty tables with FK references but no data or queries
-- Medical code resolution now uses only vector-based system:
--   - universal_medical_codes (embedded reference library)
--   - regional_medical_codes (embedded reference library)
--   - medical_code_assignments (AI-created assignments)

-- =============================================================================
-- =============================================================================
-- SECTION 2: SEMANTIC FILE ARCHITECTURE - SHELL FILES + CLINICAL NARRATIVES
-- =============================================================================
-- CRITICAL CHANGE: Replace primitive document intelligence with semantic architecture
-- This eliminates dangerous mixed medical contexts and enables clinical storytelling

-- Shell Files (Physical Upload Containers) - Renamed from documents
CREATE TABLE IF NOT EXISTS shell_files (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    
    -- Physical file metadata
    filename TEXT NOT NULL,
    original_filename TEXT NOT NULL,
    file_size_bytes BIGINT NOT NULL,
    mime_type TEXT NOT NULL,
    storage_path TEXT NOT NULL,
    
    -- Processing status
    status TEXT NOT NULL DEFAULT 'uploaded' CHECK (status IN (
        'uploaded', 'processing', 'pass1_complete', 'pass2_complete', 'pass3_complete',
        'completed', 'failed', 'archived'
    )),
    processing_started_at TIMESTAMPTZ,
    processing_completed_at TIMESTAMPTZ,
    processing_error JSONB, -- Enhanced error details with structure
    
    -- File classification
    file_type TEXT CHECK (file_type IN (
        'medical_record', 'lab_result', 'imaging_report', 'prescription',
        'discharge_summary', 'referral', 'insurance_card', 'id_document', 'other'
    )),
    file_subtype TEXT,
    confidence_score NUMERIC(3,2),
    
    -- Content analysis
    extracted_text TEXT,
    ocr_confidence NUMERIC(3,2),
    page_count INTEGER DEFAULT 1,
    
    -- POST-PASS 3: Shell File Synthesis (replaces primitive document intelligence)
    ai_synthesized_summary TEXT, -- Intelligent overview of all narratives in this shell file
    narrative_count INTEGER DEFAULT 0, -- Number of clinical narratives created from this shell file
    synthesis_completed_at TIMESTAMPTZ, -- When Pass 3 synthesis completed
    
    -- V5 Phase 2: Job Coordination Integration
    processing_job_id UUID, -- Will reference job_queue(id) after 08_job_coordination.sql deployment
    processing_worker_id VARCHAR(100), -- Worker that processed this file
    processing_priority INTEGER DEFAULT 100, -- Processing priority (lower = higher priority)
    idempotency_key TEXT, -- Prevents duplicate processing
    
    -- V5 Business Analytics Integration
    processing_cost_estimate DECIMAL(10,4) DEFAULT 0, -- Estimated processing cost
    processing_duration_seconds INTEGER, -- Actual processing time
    
    -- Upload and processing metadata
    language_detected TEXT DEFAULT 'en',
    
    -- Healthcare-specific metadata
    provider_name TEXT,
    facility_name TEXT,
    upload_context TEXT,

    -- Phase 2 Image Processing Optimization (Migration 21 - 2025-10-10)
    processed_image_path TEXT CHECK (processed_image_path IS NULL OR char_length(processed_image_path) BETWEEN 1 AND 2048), -- Storage path for downscaled image
    processed_image_checksum TEXT, -- SHA256 checksum for idempotency
    processed_image_mime TEXT, -- MIME type of processed image

    -- Audit and lifecycle
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Clinical Narratives (Semantic Storylines) - AI-determined clinical meaning
CREATE TABLE IF NOT EXISTS clinical_narratives (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    shell_file_id UUID NOT NULL REFERENCES shell_files(id) ON DELETE CASCADE,
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE, -- Denormalized for performance
    
    -- Narrative Classification and Intelligence  
    narrative_purpose TEXT NOT NULL, -- "hypertension_management", "acute_respiratory_episode", "diabetes_journey"
    clinical_classification TEXT NOT NULL CHECK (clinical_classification IN (
        'chronic_condition_journey', 'acute_care_episode', 'preventive_care_sequence',
        'medication_management', 'diagnostic_workup', 'treatment_response', 'administrative_reference'
    )),
    
    -- AI-Generated Narrative Intelligence (Pass 3 Results)
    ai_narrative_summary TEXT NOT NULL, -- Clinically coherent storyline summary
    ai_narrative_purpose TEXT NOT NULL, -- AI's understanding of clinical purpose  
    ai_key_findings TEXT[] DEFAULT '{}', -- Key clinical insights from this narrative
    ai_narrative_confidence NUMERIC(3,2) NOT NULL CHECK (ai_narrative_confidence BETWEEN 0 AND 1),
    
    -- Physical Source Mapping (can span non-contiguous pages!)
    source_page_ranges INT[] NOT NULL DEFAULT '{}', -- [1, 4, 8, 12] - pages containing this narrative content
    source_text_segments TEXT[], -- Extracted text segments that comprise this narrative
    entity_count INTEGER DEFAULT 0, -- Number of clinical entities in this narrative
    
    -- Clinical Context and Timeline
    narrative_start_date TIMESTAMPTZ, -- Clinical timeframe this narrative covers (start)
    narrative_end_date TIMESTAMPTZ, -- Clinical timeframe this narrative covers (end)  
    is_ongoing BOOLEAN DEFAULT FALSE, -- True for chronic conditions, ongoing treatments
    clinical_urgency TEXT CHECK (clinical_urgency IN ('routine', 'urgent', 'emergent', 'chronic_management')),
    
    -- Semantic Coherence Metrics
    semantic_coherence_score NUMERIC(3,2) CHECK (semantic_coherence_score BETWEEN 0 AND 1), -- How well does this narrative hang together clinically
    clinical_complexity_score NUMERIC(3,2) CHECK (clinical_complexity_score BETWEEN 0 AND 1), -- Simple vs complex clinical situation
    
    -- Processing Metadata
    narrative_creation_method TEXT DEFAULT 'ai_pass_3' CHECK (narrative_creation_method IN (
        'ai_pass_3', 'manual_creation', 'template_based', 'migration_legacy'
    )),
    pass_3_processing_duration INTERVAL,

    -- Audit and lifecycle
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add narrative enhancements from migration 03 (vector embeddings and versioning)
DO $$
BEGIN
    -- Add vector embedding column for semantic search
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                   WHERE c.table_name = 'clinical_narratives' AND c.column_name = 'narrative_embedding') THEN
        ALTER TABLE clinical_narratives ADD COLUMN narrative_embedding VECTOR(1536);
        RAISE NOTICE 'Added narrative_embedding column to clinical_narratives';
    END IF;

    -- Add versioning columns for narrative evolution
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                   WHERE c.table_name = 'clinical_narratives' AND c.column_name = 'is_current') THEN
        ALTER TABLE clinical_narratives ADD COLUMN is_current BOOLEAN NOT NULL DEFAULT TRUE;
        RAISE NOTICE 'Added is_current column to clinical_narratives';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                   WHERE c.table_name = 'clinical_narratives' AND c.column_name = 'supersedes_id') THEN
        ALTER TABLE clinical_narratives ADD COLUMN supersedes_id UUID REFERENCES clinical_narratives(id);
        RAISE NOTICE 'Added supersedes_id column to clinical_narratives';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                   WHERE c.table_name = 'clinical_narratives' AND c.column_name = 'content_fingerprint') THEN
        ALTER TABLE clinical_narratives ADD COLUMN content_fingerprint TEXT;
        RAISE NOTICE 'Added content_fingerprint column to clinical_narratives';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                   WHERE c.table_name = 'clinical_narratives' AND c.column_name = 'semantic_tags') THEN
        ALTER TABLE clinical_narratives ADD COLUMN semantic_tags JSONB DEFAULT '[]'::jsonb;
        RAISE NOTICE 'Added semantic_tags column to clinical_narratives';
    END IF;

    RAISE NOTICE 'Clinical narratives enhanced with vector embeddings and versioning support';
END $$;

-- Row Level Security (Migration 24 - 2025-10-14)
ALTER TABLE clinical_narratives ENABLE ROW LEVEL SECURITY;
ALTER TABLE clinical_narratives FORCE ROW LEVEL SECURITY;

-- NOTE: Clinical Narrative Linking System moved to Section 4B after all clinical tables are created

-- =============================================================================
-- SECTION 2C: NARRATIVE SOURCE MAPPINGS
-- =============================================================================

-- Narrative Source Mappings (detailed page/section references)
CREATE TABLE IF NOT EXISTS narrative_source_mappings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    narrative_id UUID NOT NULL REFERENCES clinical_narratives(id) ON DELETE CASCADE,
    shell_file_id UUID NOT NULL REFERENCES shell_files(id) ON DELETE CASCADE, -- Denormalized for performance
    
    -- Source Location Details
    page_number INTEGER NOT NULL,
    section_start_position INTEGER, -- Character position where narrative content starts
    section_end_position INTEGER, -- Character position where narrative content ends
    source_text_excerpt TEXT, -- Key text excerpt from this section
    
    -- Content Classification
    content_type TEXT CHECK (content_type IN (
        'clinical_note', 'lab_result', 'medication_order', 'assessment_plan', 
        'patient_history', 'physical_exam', 'diagnostic_interpretation'
    )),
    clinical_significance TEXT CHECK (clinical_significance IN ('primary', 'supporting', 'contextual', 'administrative')),
    
    -- Processing Metadata
    extraction_confidence NUMERIC(3,2) CHECK (extraction_confidence BETWEEN 0 AND 1),
    
    -- Audit
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =============================================================================
-- SECTION 3: ENHANCED CLINICAL DATA TABLES (V3 Core + Narrative Integration)
-- =============================================================================
-- Add narrative_id references to all clinical tables for storytelling UX

-- Update existing clinical tables to reference clinical narratives
-- Note: These will be ALTER TABLE statements in migration, shown as CREATE for clarity

-- Patient Clinical Events (V3 Core Hub) - ENHANCED with dual reference system
CREATE TABLE IF NOT EXISTS patient_clinical_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    encounter_id UUID, -- Will reference healthcare_encounters(id) - constraint added later
    
    -- DUAL REFERENCE SYSTEM (Hybrid Architecture)
    shell_file_id UUID NOT NULL REFERENCES shell_files(id) ON DELETE CASCADE, -- Always present (system functional)
    narrative_id UUID REFERENCES clinical_narratives(id) ON DELETE SET NULL, -- Optional enhancement (Pass 3 result)
    
    -- O3's Two-Axis Classification System
    activity_type TEXT NOT NULL CHECK (activity_type IN ('observation', 'intervention')),
    clinical_purposes TEXT[] NOT NULL, -- Multi-purpose: ['screening', 'diagnostic', 'therapeutic', 'monitoring', 'preventive']
    
    -- Event Details
    event_name TEXT NOT NULL, -- "Blood Pressure Measurement", "Wart Cryotherapy", "HIV Test"
    method TEXT, -- 'physical_exam', 'laboratory', 'imaging', 'injection', 'surgery', 'assessment_tool'
    body_site TEXT, -- 'left_ear', 'chest', 'left_hand', 'brain'
    
    -- Healthcare Standards Integration (V3 + V2)
    snomed_code TEXT, -- SNOMED CT codes for clinical concepts
    loinc_code TEXT, -- LOINC codes for observations and lab tests
    cpt_code TEXT, -- CPT codes for procedures and services
    icd10_code TEXT, -- ICD-10 diagnosis codes
    
    -- Timing and Context
    event_date TIMESTAMPTZ NOT NULL,
    performed_by TEXT, -- Healthcare provider or facility
    facility_name TEXT,
    service_date DATE,
    
    -- V3 AI Processing Integration
    ai_extracted BOOLEAN DEFAULT FALSE,
    ai_confidence NUMERIC(4,3) CHECK (ai_confidence BETWEEN 0 AND 1),
    ai_model_version TEXT DEFAULT 'v3',
    entity_id TEXT, -- Links back to Pass 1 entity detection
    confidence_score NUMERIC(4,3) CHECK (confidence_score BETWEEN 0 AND 1),
    requires_review BOOLEAN DEFAULT FALSE,
    
    -- V3 AI Processing enhancements
    ai_processing_version TEXT DEFAULT 'v3',
    entity_extraction_completed BOOLEAN DEFAULT FALSE,
    clinical_data_extracted BOOLEAN DEFAULT FALSE,
    requires_manual_review BOOLEAN DEFAULT FALSE,
    ai_confidence_scores JSONB DEFAULT '{}',
    
    -- V3 CRITICAL ADDITION: AI-Generated File Intelligence
    ai_document_summary TEXT, -- "7-day hospital stay for cardiac evaluation with stent placement and medication adjustments"
    ai_file_purpose TEXT, -- "Post-surgical discharge planning with follow-up care instructions"  
    ai_key_findings TEXT[], -- ["Successful stent placement", "Blood pressure stable", "Home care approved"]
    ai_file_confidence NUMERIC(3,2) CHECK (ai_file_confidence BETWEEN 0 AND 1), -- Overall confidence in file analysis
    
    -- V2 Medical Coding Integration
    coding_confidence NUMERIC(4,3) CHECK (coding_confidence BETWEEN 0 AND 1),
    coding_method TEXT DEFAULT 'automated_ai' CHECK (coding_method IN ('automated_ai', 'manual_verification', 'hybrid_validation')),
    
    -- Security and compliance
    contains_phi BOOLEAN DEFAULT TRUE, -- Assume PHI until proven otherwise
    encryption_key_id TEXT,
    retention_period INTERVAL DEFAULT '7 years',
    
    -- Audit and Lifecycle Management
    archived BOOLEAN NOT NULL DEFAULT FALSE,
    archived_reason TEXT,
    archived_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    deleted_at TIMESTAMPTZ, -- Soft delete for compliance

    -- User Review Tracking
    reviewed_by UUID REFERENCES auth.users(id),
    reviewed_at TIMESTAMPTZ,

    -- Migration 08: Hub-and-Spoke Architecture Enforcement
    is_synthetic BOOLEAN DEFAULT FALSE, -- Tracks backfilled events created for orphaned clinical records

    -- Migration 08: Composite unique constraint enables composite FKs on child tables
    CONSTRAINT patient_clinical_events_id_patient_id_key UNIQUE (id, patient_id)
);

-- =============================================================================
-- SECTION 3: V3 CORE CLINICAL ARCHITECTURE (O3 Two-Axis Classification)
-- =============================================================================
-- CRITICAL FIX: All patient_id columns now reference user_profiles(id)
-- V3 INTEGRATION: Central clinical events table with supporting detail tables

-- NOTE: patient_clinical_events table already defined above with hybrid architecture
-- This section defines the supporting detail tables that extend the central hub

-- Observation details table for information gathering events (CRITICAL V3 COMPONENT)
-- Migration 08: This table has NO patient_id column - derives it through event_id → patient_clinical_events
CREATE TABLE IF NOT EXISTS patient_observations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id UUID NOT NULL REFERENCES patient_clinical_events(id) ON DELETE CASCADE, -- Migration 08: Required hub reference
    
    -- Classification
    observation_type TEXT NOT NULL, -- 'vital_sign', 'lab_result', 'physical_finding', 'assessment_score'
    
    -- Measurement Values (flexible value storage)
    value_text TEXT, -- Original extracted text value
    value_numeric NUMERIC, -- Normalized numeric value
    value_secondary NUMERIC, -- For paired values like BP (systolic/diastolic)
    value_boolean BOOLEAN, -- For yes/no findings
    unit TEXT, -- Measurement unit
    
    -- Reference Ranges and Interpretation
    reference_range_text TEXT, -- "Normal: 120-140 mg/dL"
    reference_range_low NUMERIC,
    reference_range_high NUMERIC,
    interpretation TEXT CHECK (interpretation IN ('normal', 'high', 'low', 'critical', 'abnormal')),
    
    -- Assessment/Screening Specific Fields
    assessment_tool TEXT, -- 'MMSE', 'PHQ-9', 'Glasgow Coma Scale'
    score_max NUMERIC, -- Maximum possible score (e.g., 30 for MMSE)
    
    -- V3 AI Processing Integration
    ai_extracted BOOLEAN DEFAULT FALSE,
    ai_confidence NUMERIC(4,3) CHECK (ai_confidence BETWEEN 0 AND 1),
    requires_review BOOLEAN DEFAULT FALSE,
    
    -- Audit
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Migration 08: Event reference index for efficient joins
CREATE INDEX IF NOT EXISTS idx_patient_observations_event_id ON patient_observations(event_id);

-- Intervention details table for action events (CRITICAL V3 COMPONENT)
-- Migration 08: This table has NO patient_id column - derives it through event_id → patient_clinical_events
CREATE TABLE IF NOT EXISTS patient_interventions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id UUID NOT NULL REFERENCES patient_clinical_events(id) ON DELETE CASCADE, -- Migration 08: Required hub reference
    
    -- Classification
    intervention_type TEXT NOT NULL, -- 'medication_admin', 'vaccination', 'minor_procedure', 'surgery', 'therapy'
    
    -- Substance/Medication Details (for drugs, vaccines, etc.)
    substance_name TEXT, -- "Influenza A Vaccine", "Lidocaine", "Atorvastatin"
    manufacturer TEXT,
    lot_number TEXT,
    dose_amount NUMERIC,
    dose_unit TEXT,
    route TEXT, -- 'oral', 'intramuscular', 'topical', 'intravenous'
    frequency TEXT, -- 'daily', 'twice_daily', 'as_needed'
    
    -- Technique and Equipment
    technique TEXT, -- 'cryotherapy', 'excision', 'injection', 'suture'
    equipment_used TEXT, -- "Liquid nitrogen", "10-blade scalpel"
    
    -- Outcomes and Follow-up
    immediate_outcome TEXT, -- 'successful', 'partial', 'complications'
    complications TEXT, -- Description of any complications
    followup_required BOOLEAN DEFAULT FALSE,
    followup_instructions TEXT,
    
    -- V3 AI Processing Integration
    ai_extracted BOOLEAN DEFAULT FALSE,
    ai_confidence NUMERIC(4,3) CHECK (ai_confidence BETWEEN 0 AND 1),
    requires_review BOOLEAN DEFAULT FALSE,
    
    -- Audit
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Migration 08: Event reference index for efficient joins
CREATE INDEX IF NOT EXISTS idx_patient_interventions_event_id ON patient_interventions(event_id);

-- Healthcare encounters table for visit context (CRITICAL V3 COMPONENT)
CREATE TABLE IF NOT EXISTS healthcare_encounters (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    
    -- Encounter Classification
    encounter_type TEXT NOT NULL, -- 'outpatient', 'inpatient', 'emergency', 'specialist', 'telehealth', 'diagnostic'
    encounter_date TIMESTAMPTZ,
    
    -- Provider and Facility Information
    provider_name TEXT,
    provider_type TEXT, -- 'primary_care', 'specialist', 'hospital', 'urgent_care'
    facility_name TEXT,
    specialty TEXT, -- 'cardiology', 'dermatology', 'family_medicine'
    
    -- Clinical Context
    chief_complaint TEXT, -- Patient's main concern
    summary TEXT, -- Visit summary
    clinical_impression TEXT, -- Provider's assessment
    plan TEXT, -- Treatment plan
    
    -- Administrative
    visit_duration_minutes INTEGER,
    billing_codes TEXT[], -- CPT codes for billing
    
    -- File Links  
    primary_shell_file_id UUID REFERENCES shell_files(id),
    related_shell_file_ids UUID[] DEFAULT '{}',
    
    -- V3 AI Processing Integration
    ai_extracted BOOLEAN DEFAULT FALSE,
    ai_confidence NUMERIC(4,3) CHECK (ai_confidence BETWEEN 0 AND 1),
    requires_review BOOLEAN DEFAULT FALSE,
    
    -- Quality and Audit
    confidence_score NUMERIC(4,3) CHECK (confidence_score BETWEEN 0 AND 1),
    archived BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Healthcare timeline events for UI display (CRITICAL V3 COMPONENT)
CREATE TABLE IF NOT EXISTS healthcare_timeline_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    
    -- Hierarchical categorization for multi-level filtering
    display_category TEXT NOT NULL, -- 'visit', 'test_result', 'treatment', 'vaccination', 'screening', 'diagnosis'
    display_subcategory TEXT, -- 'annual_physical', 'blood_test', 'minor_procedure', 'emergency_visit'
    display_tertiary TEXT, -- 'blood_pressure', 'glucose_test', 'wart_removal', 'chest_xray'
    
    -- Display Optimization for Timeline UI
    title TEXT NOT NULL, -- "Annual Physical Exam", "Blood Pressure Check", "HIV Test Result"
    summary TEXT, -- Brief description for timeline: "Routine check-up with Dr. Johnson"
    icon TEXT, -- UI icon identifier: 'hospital', 'syringe', 'stethoscope', 'clipboard'
    color_code TEXT DEFAULT '#2563eb', -- Hex color for timeline visualization
    
    -- Event Timing
    event_date TIMESTAMPTZ NOT NULL,
    event_duration_minutes INTEGER, -- For encounters with known duration
    
    -- Source Links (Comprehensive Provenance - Russian Babushka Doll)
    encounter_id UUID REFERENCES healthcare_encounters(id),
    clinical_event_ids UUID[] DEFAULT '{}', -- Multiple related clinical events
    shell_file_id UUID REFERENCES shell_files(id), -- Source shell file
    
    -- Timeline Optimization
    is_major_event BOOLEAN DEFAULT FALSE, -- Show in compact timeline view
    display_priority INTEGER DEFAULT 100, -- Lower = higher priority (1-1000)
    consolidation_group TEXT, -- Group related events: 'comprehensive_physical_2024_07_20'
    
    -- AI Chatbot Query Optimization
    searchable_content TEXT, -- Processed text for natural language queries
    event_tags TEXT[] DEFAULT '{}', -- Tags for enhanced searching: ['routine', 'preventive', 'abnormal']
    
    -- Quality and Review
    requires_attention BOOLEAN DEFAULT FALSE, -- Flags requiring patient attention
    attention_reason TEXT, -- Why this event needs attention
    
    -- V3 AI Processing Integration
    ai_generated BOOLEAN DEFAULT FALSE,
    ai_confidence NUMERIC(4,3) CHECK (ai_confidence BETWEEN 0 AND 1),
    
    -- Audit
    archived BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =============================================================================
-- SECTION 4: SPECIALIZED CLINICAL TABLES (SUPPLEMENTARY TO V3 CORE)
-- =============================================================================
-- These tables provide additional clinical detail alongside the V3 core architecture

-- Patient medical conditions (specialized detail table) - ENHANCED with narrative linking
-- Migration 08: This table HAS patient_id column (denormalized for performance)
CREATE TABLE IF NOT EXISTS patient_conditions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    event_id UUID NOT NULL REFERENCES patient_clinical_events(id) ON DELETE CASCADE, -- Migration 08: Renamed from clinical_event_id, now required
    
    -- NARRATIVE LINKING SYSTEM - Core UX Feature
    shell_file_id UUID NOT NULL REFERENCES shell_files(id) ON DELETE CASCADE, -- Source file reference
    primary_narrative_id UUID REFERENCES clinical_narratives(id) ON DELETE SET NULL, -- Primary storyline for this condition
    -- Note: Full narrative linking handled by narrative_event_links table (generic many-to-many)
    
    -- Condition details
    condition_name TEXT NOT NULL,
    condition_code TEXT,
    condition_system TEXT CHECK (condition_system IN ('icd10', 'snomed', 'custom')),
    
    -- Note: medical_condition_code_id FK column removed in migration 06 (vestigial cleanup)
    -- Medical codes now assigned via medical_code_assignments table
    
    -- Clinical context
    severity TEXT CHECK (severity IN ('mild', 'moderate', 'severe', 'critical')),
    status TEXT NOT NULL DEFAULT 'active' CHECK (status IN (
        'active', 'resolved', 'inactive', 'remission', 'relapse'
    )),
    
    -- Temporal information
    onset_date DATE,
    diagnosed_date DATE,
    resolved_date DATE,
    
    -- Source information
    diagnosed_by TEXT, -- Provider name
    confidence_score NUMERIC(3,2) DEFAULT 1.0,
    
    -- V3 AI Processing enhancements
    ai_extracted BOOLEAN DEFAULT FALSE,
    ai_confidence NUMERIC(4,3) CHECK (ai_confidence BETWEEN 0 AND 1),
    requires_review BOOLEAN DEFAULT FALSE,
    
    -- Clinical notes
    notes TEXT,
    clinical_context JSONB DEFAULT '{}',
    
    -- Lifecycle
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    archived_at TIMESTAMPTZ,

    -- Migration 08: Composite FK ensures patient_id consistency with parent event
    CONSTRAINT patient_conditions_event_patient_fk FOREIGN KEY (event_id, patient_id)
        REFERENCES patient_clinical_events(id, patient_id) ON DELETE CASCADE
);

-- Migration 08: Event reference index for efficient joins
CREATE INDEX IF NOT EXISTS idx_patient_conditions_event_id ON patient_conditions(event_id);

-- Patient allergies and adverse reactions
-- Migration 08: This table HAS patient_id column (denormalized for performance)
CREATE TABLE IF NOT EXISTS patient_allergies (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    event_id UUID NOT NULL REFERENCES patient_clinical_events(id) ON DELETE CASCADE, -- Migration 08: Required hub reference
    
    -- Allergen details
    allergen_name TEXT NOT NULL,
    allergen_type TEXT CHECK (allergen_type IN (
        'medication', 'food', 'environmental', 'contact', 'other'
    )),
    allergen_code TEXT, -- RxNorm, UNII, etc.
    
    -- Note: medication_reference_id FK column removed in migration 06 (vestigial cleanup)
    -- Medical codes now assigned via medical_code_assignments table
    
    -- Reaction details
    reaction_type TEXT CHECK (reaction_type IN (
        'allergic', 'intolerance', 'adverse_effect', 'unknown'
    )),
    severity TEXT CHECK (severity IN ('mild', 'moderate', 'severe', 'life_threatening')),
    reaction_description TEXT,
    
    -- Clinical information
    symptoms TEXT[],
    onset_description TEXT, -- 'immediate', 'delayed', etc.
    
    -- Source and verification
    source_shell_file_id UUID REFERENCES shell_files(id),
    verified_by TEXT, -- Provider name
    verified_date DATE,
    confidence_score NUMERIC(3,2) DEFAULT 1.0,
    
    -- V3 AI Processing enhancements
    ai_extracted BOOLEAN DEFAULT FALSE,
    ai_confidence NUMERIC(4,3) CHECK (ai_confidence BETWEEN 0 AND 1),
    requires_review BOOLEAN DEFAULT FALSE,
    
    -- Status
    status TEXT NOT NULL DEFAULT 'active' CHECK (status IN (
        'active', 'inactive', 'resolved', 'entered_in_error'
    )),
    
    -- Lifecycle
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    archived_at TIMESTAMPTZ,

    -- Migration 08: Composite FK ensures patient_id consistency with parent event
    CONSTRAINT patient_allergies_event_patient_fk FOREIGN KEY (event_id, patient_id)
        REFERENCES patient_clinical_events(id, patient_id) ON DELETE CASCADE
);

-- Migration 08: Event reference index for efficient joins
CREATE INDEX IF NOT EXISTS idx_patient_allergies_event_id ON patient_allergies(event_id);

-- Patient vital signs and measurements
-- Migration 08: This table HAS patient_id column (denormalized for performance)
CREATE TABLE IF NOT EXISTS patient_vitals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    event_id UUID NOT NULL REFERENCES patient_clinical_events(id) ON DELETE CASCADE, -- Migration 08: Required hub reference
    
    -- Measurement details
    vital_type TEXT NOT NULL CHECK (vital_type IN (
        'blood_pressure', 'heart_rate', 'temperature', 'respiratory_rate',
        'oxygen_saturation', 'weight', 'height', 'bmi', 'blood_glucose', 'other'
    )),
    
    -- Values (using JSONB for flexibility with different measurement types)
    measurement_value JSONB NOT NULL, -- e.g., {"systolic": 120, "diastolic": 80} for BP
    unit TEXT NOT NULL, -- 'mmHg', 'bpm', 'F', 'C', 'kg', 'lbs', etc.
    
    -- Context
    measurement_date TIMESTAMPTZ NOT NULL,
    measurement_method TEXT, -- 'manual', 'automated', 'self_reported'
    body_position TEXT, -- 'sitting', 'standing', 'lying'
    
    -- Source information
    measured_by TEXT, -- Provider, patient, device
    source_shell_file_id UUID REFERENCES shell_files(id),
    device_info JSONB, -- Device manufacturer, model, etc.
    
    -- Clinical context
    clinical_context TEXT, -- 'routine_visit', 'emergency', 'home_monitoring'
    notes TEXT,
    
    -- Quality indicators
    confidence_score NUMERIC(3,2) DEFAULT 1.0,
    is_abnormal BOOLEAN DEFAULT FALSE,
    reference_range JSONB, -- Normal ranges for this measurement
    
    -- V3 AI Processing enhancements
    ai_extracted BOOLEAN DEFAULT FALSE,
    ai_confidence NUMERIC(4,3) CHECK (ai_confidence BETWEEN 0 AND 1),
    requires_review BOOLEAN DEFAULT FALSE,
    
    -- Lifecycle
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    archived_at TIMESTAMPTZ,

    -- Migration 08: Composite FK ensures patient_id consistency with parent event
    CONSTRAINT patient_vitals_event_patient_fk FOREIGN KEY (event_id, patient_id)
        REFERENCES patient_clinical_events(id, patient_id) ON DELETE CASCADE
);

-- Migration 08: Event reference index for efficient joins
CREATE INDEX IF NOT EXISTS idx_patient_vitals_event_id ON patient_vitals(event_id);

-- =============================================================================
-- SECTION 4: V3 ENHANCED CLINICAL TABLES
-- =============================================================================
-- CRITICAL FIX: patient_id correctly references user_profiles(id)

-- Patient immunizations with comprehensive healthcare standards integration
-- Migration 08: This table HAS patient_id column (denormalized for performance)
CREATE TABLE IF NOT EXISTS patient_immunizations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    event_id UUID NOT NULL REFERENCES patient_clinical_events(id) ON DELETE CASCADE, -- Migration 08: Required hub reference
    
    -- Immunization Details
    vaccine_name TEXT NOT NULL, -- "COVID-19 mRNA vaccine", "Influenza vaccine"
    vaccine_type TEXT, -- "mRNA", "inactivated", "live attenuated", "subunit"
    manufacturer TEXT, -- "Pfizer-BioNTech", "Moderna", "Johnson & Johnson"
    lot_number TEXT,
    expiration_date DATE,
    
    -- Administration Details
    dose_number INTEGER, -- 1st dose, 2nd dose, booster
    dose_amount NUMERIC(6,3), -- Amount in mL
    route_of_administration TEXT, -- "intramuscular", "intranasal", "oral"
    anatomical_site TEXT, -- "left deltoid", "right deltoid", "anterolateral thigh"
    
    -- Healthcare Standards Integration (V3)
    snomed_code TEXT, -- SNOMED-CT vaccine codes
    cpt_code TEXT, -- CPT administration codes (90686, 90688, etc.)
    cvx_code TEXT, -- CDC vaccine codes (CVX codes)
    ndc_code TEXT, -- National Drug Code
    
    -- Australian healthcare specifics
    acir_code TEXT, -- Australian Childhood Immunisation Register codes
    pbs_item_code TEXT, -- PBS item codes for funded vaccines
    
    -- Clinical Context
    indication TEXT, -- "routine immunization", "travel", "occupational exposure"
    contraindications TEXT[], -- Array of contraindications if any
    adverse_reactions TEXT[], -- Any reported adverse reactions
    
    -- Provider Information
    administered_by TEXT, -- Healthcare provider name
    administering_facility TEXT, -- Facility name
    administration_date TIMESTAMPTZ NOT NULL,
    
    -- Data Quality and Provenance (V3)
    coding_confidence NUMERIC(4,3) CHECK (coding_confidence BETWEEN 0 AND 1),
    requires_review BOOLEAN DEFAULT FALSE,
    source_shell_file_id UUID REFERENCES shell_files(id),
    
    -- AI Processing Integration
    ai_extracted BOOLEAN DEFAULT FALSE,
    ai_confidence NUMERIC(4,3) CHECK (ai_confidence BETWEEN 0 AND 1),
    clinical_validation_status TEXT DEFAULT 'pending' CHECK (clinical_validation_status IN (
        'pending', 'validated', 'requires_review', 'rejected'
    )),
    
    -- Audit fields
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    archived_at TIMESTAMPTZ,

    -- Migration 08: Composite FK ensures patient_id consistency with parent event
    CONSTRAINT patient_immunizations_event_patient_fk FOREIGN KEY (event_id, patient_id)
        REFERENCES patient_clinical_events(id, patient_id) ON DELETE CASCADE
);

-- Migration 08: Event reference index for efficient joins
CREATE INDEX IF NOT EXISTS idx_patient_immunizations_event_id ON patient_immunizations(event_id);

-- Patient medications (enhanced for V3)
-- Migration 08: This table HAS patient_id column (denormalized for performance)
CREATE TABLE IF NOT EXISTS patient_medications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
    event_id UUID NOT NULL REFERENCES patient_clinical_events(id) ON DELETE CASCADE, -- Migration 08: Required hub reference
    
    -- Medication identification
    medication_name TEXT NOT NULL,
    generic_name TEXT,
    brand_name TEXT,
    
    -- Note: medication_reference_id FK column removed in migration 06 (vestigial cleanup)
    -- Medical codes now assigned via medical_code_assignments table
    rxnorm_code TEXT,
    pbs_code TEXT,
    atc_code TEXT,
    
    -- Prescription details
    strength TEXT,
    dosage_form TEXT,
    prescribed_dose TEXT,
    frequency TEXT,
    route TEXT,
    duration_prescribed INTERVAL,
    
    -- Clinical context
    indication TEXT,
    prescribing_provider TEXT,
    prescription_date DATE,
    start_date DATE,
    end_date DATE,
    
    -- Status and compliance
    status TEXT DEFAULT 'active' CHECK (status IN (
        'active', 'completed', 'discontinued', 'on_hold', 'cancelled'
    )),
    adherence_notes TEXT,
    
    -- Source information
    source_shell_file_id UUID REFERENCES shell_files(id),
    confidence_score NUMERIC(3,2) DEFAULT 1.0,
    
    -- AI Processing Integration (V3)
    ai_extracted BOOLEAN DEFAULT FALSE,
    ai_confidence NUMERIC(4,3) CHECK (ai_confidence BETWEEN 0 AND 1),
    requires_review BOOLEAN DEFAULT FALSE,
    drug_interaction_checked BOOLEAN DEFAULT FALSE,
    
    -- Clinical notes
    notes TEXT,
    clinical_context JSONB DEFAULT '{}',
    
    -- Lifecycle
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    archived_at TIMESTAMPTZ,

    -- Migration 08: Composite FK ensures patient_id consistency with parent event
    CONSTRAINT patient_medications_event_patient_fk FOREIGN KEY (event_id, patient_id)
        REFERENCES patient_clinical_events(id, patient_id) ON DELETE CASCADE
);

-- Migration 08: Event reference index for efficient joins
CREATE INDEX IF NOT EXISTS idx_patient_medications_event_id ON patient_medications(event_id);

-- =============================================================================
-- SECTION 4B: CLINICAL NARRATIVE LINKING SYSTEM 
-- =============================================================================
-- CRITICAL UX FEATURE: Link narratives to all relevant clinical data
-- Enables storytelling UX where every clinical item tells its narrative story
-- MOVED HERE: After all clinical tables are created to avoid forward references

-- NOTE: narrative_condition_links table removed in migration 05 (2025-09-29)
-- Replaced by generic narrative_event_links table for all entity linking

-- NOTE: Specific narrative linking tables removed in migration 05 (2025-09-29)
-- Tables removed: narrative_medication_links, narrative_allergy_links,
-- narrative_immunization_links, narrative_vital_links
-- Replaced by generic narrative_event_links table for all entity linking

-- Additional narrative relationship tables from migration 03
CREATE TABLE IF NOT EXISTS narrative_relationships (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),

    -- Relationship participants
    source_narrative_id UUID NOT NULL REFERENCES clinical_narratives(id) ON DELETE CASCADE,
    target_narrative_id UUID NOT NULL REFERENCES clinical_narratives(id) ON DELETE CASCADE,

    -- Relationship classification
    relationship_type TEXT NOT NULL CHECK (relationship_type IN (
        'temporal_sequence', 'causal_relationship', 'context_sharing', 'contradictory_information',
        'supporting_evidence', 'update_relationship', 'treatment_response', 'diagnostic_evolution'
    )),
    relationship_strength DECIMAL(3,2) NOT NULL CHECK (relationship_strength BETWEEN 0.0 AND 1.0),

    -- Clinical context
    clinical_rationale TEXT NOT NULL,
    temporal_relationship TEXT CHECK (temporal_relationship IN ('before', 'after', 'concurrent', 'overlapping')),

    -- Confidence and validation
    confidence_score DECIMAL(3,2) NOT NULL CHECK (confidence_score BETWEEN 0.0 AND 1.0),
    validation_status TEXT NOT NULL DEFAULT 'ai_generated' CHECK (validation_status IN (
        'ai_generated', 'clinically_validated', 'patient_confirmed', 'requires_review'
    )),

    -- Processing metadata
    created_by_ai_pass TEXT DEFAULT 'pass_3',
    relationship_source TEXT DEFAULT 'semantic_analysis',

    -- Audit
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    -- Prevent self-references and duplicate relationships
    CONSTRAINT no_self_reference CHECK (source_narrative_id != target_narrative_id),
    UNIQUE(source_narrative_id, target_narrative_id, relationship_type)
);

CREATE TABLE IF NOT EXISTS narrative_event_links (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),

    -- Link participants
    narrative_id UUID NOT NULL REFERENCES clinical_narratives(id) ON DELETE CASCADE,
    clinical_event_id UUID NOT NULL REFERENCES patient_clinical_events(id) ON DELETE CASCADE,

    -- Link classification
    link_type TEXT NOT NULL CHECK (link_type IN (
        'primary_event', 'supporting_event', 'contextual_event', 'temporal_marker', 'outcome_event'
    )),
    clinical_significance TEXT NOT NULL CHECK (clinical_significance IN ('primary', 'secondary', 'contextual')),

    -- Event role in narrative
    event_role_description TEXT,
    narrative_context TEXT,
    temporal_position TEXT CHECK (temporal_position IN ('beginning', 'middle', 'end', 'throughout')),

    -- Clinical correlation
    clinical_correlation_strength DECIMAL(3,2) CHECK (clinical_correlation_strength BETWEEN 0.0 AND 1.0),

    -- Audit
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    UNIQUE(narrative_id, clinical_event_id)
);

-- Narrative utility functions from migration 03
CREATE OR REPLACE FUNCTION detect_narrative_cycles(
    p_source_narrative_id UUID,
    p_target_narrative_id UUID
) RETURNS BOOLEAN AS $$
DECLARE
    relationship RECORD;
    visited_narratives UUID[] := ARRAY[]::UUID[];
    current_narrative UUID;
    queue UUID[];
BEGIN
    -- BFS to detect cycles
    queue := ARRAY[p_source_narrative_id];

    WHILE array_length(queue, 1) > 0 LOOP
        current_narrative := queue[1];
        queue := queue[2:];

        -- Check if we've reached the target (cycle detected)
        IF current_narrative = p_target_narrative_id THEN
            RETURN TRUE;
        END IF;

        -- Skip if already visited
        IF current_narrative = ANY(visited_narratives) THEN
            CONTINUE;
        END IF;

        visited_narratives := visited_narratives || current_narrative;

        -- Add children to queue
        FOR relationship IN
            SELECT target_narrative_id
            FROM narrative_relationships
            WHERE source_narrative_id = current_narrative
        LOOP
            IF relationship.target_narrative_id NOT IN (SELECT unnest(visited_narratives)) THEN
                queue := queue || relationship.target_narrative_id;
            END IF;
        END LOOP;
    END LOOP;

    RETURN FALSE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, pg_temp;

CREATE OR REPLACE FUNCTION get_current_narratives(p_patient_id UUID)
RETURNS TABLE (
    narrative_id UUID,
    clinical_classification TEXT,
    ai_narrative_summary TEXT,
    ai_narrative_confidence NUMERIC,
    narrative_start_date TIMESTAMPTZ,
    narrative_end_date TIMESTAMPTZ,
    is_ongoing BOOLEAN
) AS $$
BEGIN
    -- Verify profile access
    IF NOT has_profile_access(auth.uid(), p_patient_id) AND NOT is_admin() THEN
        RAISE EXCEPTION 'Access denied to profile data';
    END IF;

    RETURN QUERY
    SELECT
        cn.id,
        cn.clinical_classification,
        cn.ai_narrative_summary,
        cn.ai_narrative_confidence,
        cn.narrative_start_date,
        cn.narrative_end_date,
        cn.is_ongoing
    FROM clinical_narratives cn
    WHERE cn.patient_id = p_patient_id
    AND cn.is_current = TRUE
    AND (cn.ai_narrative_confidence IS NULL OR cn.ai_narrative_confidence >= 0.7)
    ORDER BY cn.narrative_start_date DESC NULLS LAST;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, pg_temp;

CREATE OR REPLACE FUNCTION find_similar_narratives(
    p_narrative_embedding vector,
    p_patient_id UUID,
    p_similarity_threshold REAL DEFAULT 0.7,
    p_limit INTEGER DEFAULT 10
) RETURNS TABLE (
    narrative_id UUID,
    clinical_classification TEXT,
    ai_narrative_summary TEXT,
    similarity_score REAL,
    is_current BOOLEAN
) AS $$
BEGIN
    -- Verify profile access
    IF NOT has_profile_access(auth.uid(), p_patient_id) AND NOT is_admin() THEN
        RAISE EXCEPTION 'Access denied to profile data';
    END IF;

    RETURN QUERY
    SELECT
        cn.id,
        cn.clinical_classification,
        cn.ai_narrative_summary,
        (1 - (cn.narrative_embedding <=> p_narrative_embedding))::REAL as similarity_score,
        cn.is_current
    FROM clinical_narratives cn
    WHERE cn.patient_id = p_patient_id
    AND cn.narrative_embedding IS NOT NULL
    AND (1 - (cn.narrative_embedding <=> p_narrative_embedding)) >= p_similarity_threshold
    ORDER BY cn.narrative_embedding <=> p_narrative_embedding
    LIMIT p_limit;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, pg_temp;

-- =============================================================================
-- SECTION 4C: TEMPORAL DATA MANAGEMENT ENHANCEMENTS (FROM MIGRATION 02)
-- =============================================================================
-- Added after successful deployment of migration 02 - temporal data management

-- Add temporal columns to all clinical tables for deduplication and versioning
DO $$
DECLARE
    clinical_tables TEXT[] := ARRAY[
        'patient_medications', 'patient_conditions', 'patient_allergies',
        'patient_vitals', 'patient_immunizations', 'patient_interventions',
        'patient_observations', 'healthcare_encounters', 'healthcare_timeline_events'
    ];
    table_name TEXT;
BEGIN
    FOREACH table_name IN ARRAY clinical_tables LOOP
        -- Add temporal columns if they don't exist (from migration 02)
        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'clinical_event_id') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN clinical_event_id UUID REFERENCES patient_clinical_events(id)';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'primary_narrative_id') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN primary_narrative_id UUID REFERENCES clinical_narratives(id)';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'valid_from') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN valid_from TIMESTAMPTZ NOT NULL DEFAULT NOW()';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'valid_to') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN valid_to TIMESTAMPTZ NULL';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'superseded_by_record_id') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN superseded_by_record_id UUID REFERENCES ' || table_name || '(id) ON DELETE SET NULL';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'supersession_reason') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN supersession_reason TEXT';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'is_current') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN is_current BOOLEAN GENERATED ALWAYS AS (valid_to IS NULL) STORED';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'clinical_effective_date') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN clinical_effective_date DATE';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'date_confidence') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN date_confidence TEXT CHECK (date_confidence IN (''high'', ''medium'', ''low'', ''conflicted''))';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'extracted_dates') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN extracted_dates JSONB DEFAULT ''[]''::jsonb';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'date_source') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN date_source TEXT CHECK (date_source IN (''clinical_content'', ''document_date'', ''file_metadata'', ''upload_timestamp'', ''user_provided''))';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'date_conflicts') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN date_conflicts JSONB DEFAULT ''[]''::jsonb';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'date_resolution_reason') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN date_resolution_reason TEXT';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM information_schema.columns c
                       WHERE c.table_name = table_name AND c.column_name = 'clinical_identity_key') THEN
            EXECUTE 'ALTER TABLE ' || table_name || ' ADD COLUMN clinical_identity_key TEXT';
        END IF;

        RAISE NOTICE 'Added temporal columns to %', table_name;
    END LOOP;
END $$;

-- Temporal audit tables from migration 02 (exact tables created)
CREATE TABLE IF NOT EXISTS clinical_entity_supersession_audit (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id),
    superseded_entity_id UUID NOT NULL,
    superseding_entity_id UUID NOT NULL,
    entity_table TEXT NOT NULL,
    supersession_reason TEXT,
    supersession_confidence DECIMAL(3,2) CHECK (supersession_confidence BETWEEN 0.00 AND 1.00),
    supersession_details JSONB DEFAULT '{}',
    performed_at TIMESTAMPTZ DEFAULT NOW(),
    performed_by_worker TEXT DEFAULT 'temporal_deduplication_system'
);

CREATE TABLE IF NOT EXISTS clinical_identity_audit (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id),
    clinical_entity_id UUID NOT NULL,
    entity_table TEXT NOT NULL,
    clinical_identity_key TEXT NOT NULL,
    identity_generation_method TEXT DEFAULT 'generated_column',
    identity_hash_version TEXT DEFAULT 'v1',
    identity_fields_used JSONB DEFAULT '{}',
    identity_confidence DECIMAL(3,2) CHECK (identity_confidence BETWEEN 0.00 AND 1.00),
    recorded_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS temporal_resolution_audit (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id),
    clinical_entity_id UUID NOT NULL,
    entity_table TEXT NOT NULL,
    shell_file_id UUID NOT NULL REFERENCES shell_files(id),
    original_dates JSONB DEFAULT '[]'::jsonb,
    resolved_clinical_date DATE,
    date_confidence TEXT CHECK (date_confidence IN ('high', 'medium', 'low', 'conflicted')),
    date_source TEXT CHECK (date_source IN ('clinical_content', 'document_date', 'file_metadata', 'upload_timestamp', 'user_provided')),
    resolution_reason TEXT,
    conflicts_detected JSONB DEFAULT '[]'::jsonb,
    resolved_at TIMESTAMPTZ DEFAULT NOW(),
    resolved_by_system TEXT DEFAULT 'temporal_date_resolver'
);

CREATE TABLE IF NOT EXISTS deduplication_processing_log (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id),
    shell_file_id UUID NOT NULL REFERENCES shell_files(id),
    processing_status TEXT NOT NULL DEFAULT 'processing' CHECK (processing_status IN ('processing', 'completed', 'failed', 'cancelled')),
    entities_processed INTEGER DEFAULT 0,
    duplicates_found INTEGER DEFAULT 0,
    supersessions_created INTEGER DEFAULT 0,
    processing_start_time TIMESTAMPTZ DEFAULT NOW(),
    processing_end_time TIMESTAMPTZ,
    processing_duration_ms INTEGER,
    error_details JSONB DEFAULT '{}',
    performance_metrics JSONB DEFAULT '{}'
);

-- Materialized view for current clinical state (from migration 02)
CREATE MATERIALIZED VIEW IF NOT EXISTS patient_current_clinical_state AS
SELECT
  patient_id, 'medication' as entity_type, clinical_identity_key,
  id as current_record_id, clinical_effective_date, date_confidence,
  superseded_by_record_id, valid_from, valid_to
FROM patient_medications WHERE is_current = TRUE
UNION ALL
SELECT
  patient_id, 'condition' as entity_type, clinical_identity_key,
  id as current_record_id, clinical_effective_date, date_confidence,
  superseded_by_record_id, valid_from, valid_to
FROM patient_conditions WHERE is_current = TRUE
UNION ALL
SELECT
  patient_id, 'allergy' as entity_type, clinical_identity_key,
  id as current_record_id, clinical_effective_date, date_confidence,
  superseded_by_record_id, valid_from, valid_to
FROM patient_allergies WHERE is_current = TRUE
UNION ALL
SELECT
  patient_id, 'vital' as entity_type, clinical_identity_key,
  id as current_record_id, clinical_effective_date, date_confidence,
  superseded_by_record_id, valid_from, valid_to
FROM patient_vitals WHERE is_current = TRUE
UNION ALL
SELECT
  patient_id, 'immunization' as entity_type, clinical_identity_key,
  id as current_record_id, clinical_effective_date, date_confidence,
  superseded_by_record_id, valid_from, valid_to
FROM patient_immunizations WHERE is_current = TRUE;

-- =============================================================================
-- SECTION 4D: MEDICAL CODE RESOLUTION SYSTEM (FROM MIGRATION 04)
-- =============================================================================
-- Added after successful deployment of migration 04 - medical code resolution
-- Migration 28 (2025-10-17): Added embedding_batches table + clinical metadata

-- Embedding batch tracking table (efficient model tracking) - Migration 28
CREATE TABLE IF NOT EXISTS embedding_batches (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    
    -- Model identification
    embedding_model VARCHAR(50) NOT NULL,
    embedding_dimensions INTEGER NOT NULL,
    api_version VARCHAR(20) NOT NULL,
    
    -- Batch context
    code_system VARCHAR(20) NOT NULL,
    library_version VARCHAR(20) NOT NULL,
    total_codes INTEGER NOT NULL,
    
    -- Processing metadata (with safety constraints)
    processing_cost_usd DECIMAL(8,4) CHECK (processing_cost_usd >= 0),
    processing_time_minutes INTEGER CHECK (processing_time_minutes >= 0),
    
    -- Audit
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    
    -- Ensure unique combinations
    UNIQUE(code_system, library_version, embedding_model)
);

COMMENT ON TABLE embedding_batches IS 
'Efficient tracking of embedding generation batches. One record per batch instead of duplicating model info across all medical codes. Enables model consistency validation and cost tracking.';

-- Universal medical codes with vector embeddings for global interoperability
CREATE TABLE IF NOT EXISTS universal_medical_codes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),

    -- Code identification
    code_system VARCHAR(20) NOT NULL CHECK (code_system IN ('rxnorm', 'snomed', 'loinc')),
    code_value VARCHAR(50) NOT NULL,
    display_name TEXT NOT NULL,

    -- Vector embedding for similarity search (1536 dimensions for text-embedding-3-small)
    embedding VECTOR(1536),

    -- Classification and search optimization
    entity_type VARCHAR(20) NOT NULL CHECK (entity_type IN ('medication', 'condition', 'procedure', 'observation', 'allergy')),
    search_text TEXT NOT NULL,
    synonyms TEXT[] DEFAULT ARRAY[]::TEXT[],

    -- Versioning (Migration 26 - 2025-10-15)
    library_version VARCHAR(20) DEFAULT 'v1.0',
    valid_from DATE DEFAULT CURRENT_DATE,
    valid_to DATE DEFAULT NULL,
    superseded_by UUID REFERENCES universal_medical_codes(id),

    -- Quality metadata
    usage_frequency INTEGER DEFAULT 0,
    active BOOLEAN DEFAULT TRUE,
    last_updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,

    -- Migration 28 (2025-10-17): Embedding tracking and clinical metadata
    embedding_batch_id UUID REFERENCES embedding_batches(id),
    clinical_specificity VARCHAR(20) CHECK (clinical_specificity IN ('highly_specific', 'moderately_specific', 'general', 'broad_category')),
    typical_setting VARCHAR(30) CHECK (typical_setting IN ('primary_care', 'specialist', 'hospital', 'emergency', 'any')),

    -- Migration 30 (2025-10-20): Normalized embeddings for Pass 1.5 search optimization
    normalized_embedding_text TEXT,
    normalized_embedding VECTOR(1536),

    -- Unique constraint
    UNIQUE(code_system, code_value)
);

-- Row Level Security (Migration 25 - 2025-10-15)
ALTER TABLE universal_medical_codes ENABLE ROW LEVEL SECURITY;
ALTER TABLE universal_medical_codes FORCE ROW LEVEL SECURITY;

-- Regional medical codes for country-specific systems
CREATE TABLE IF NOT EXISTS regional_medical_codes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),

    -- Code identification
    code_system VARCHAR(20) NOT NULL CHECK (code_system IN ('pbs', 'mbs', 'icd10_am', 'tga', 'nhs_dmd', 'bnf', 'ndc', 'cpt', 'pzn', 'din', 'cip', 'atc', 'icd10_gm', 'ansm')),
    code_value VARCHAR(50) NOT NULL,
    display_name TEXT NOT NULL,

    -- Vector embedding for similarity search
    embedding VECTOR(1536),

    -- Regional context
    country_code CHAR(3) NOT NULL, -- ISO 3166-1 alpha-3
    region_specific_data JSONB DEFAULT '{}',
    authority_required BOOLEAN DEFAULT FALSE,

    -- Classification and search optimization
    entity_type VARCHAR(20) NOT NULL CHECK (entity_type IN ('medication', 'condition', 'procedure', 'observation', 'allergy')),
    search_text TEXT NOT NULL,

    -- Versioning (Migration 26 - 2025-10-15)
    library_version VARCHAR(20) DEFAULT 'v1.0',
    valid_from DATE DEFAULT CURRENT_DATE,
    valid_to DATE DEFAULT NULL,
    superseded_by UUID REFERENCES regional_medical_codes(id),

    -- Quality metadata
    usage_frequency INTEGER DEFAULT 0,
    active BOOLEAN DEFAULT TRUE,
    last_updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,

    -- Migration 28 (2025-10-17): Embedding tracking and clinical metadata
    embedding_batch_id UUID REFERENCES embedding_batches(id),
    clinical_specificity VARCHAR(20) CHECK (clinical_specificity IN ('highly_specific', 'moderately_specific', 'general', 'broad_category')),
    typical_setting VARCHAR(30) CHECK (typical_setting IN ('primary_care', 'specialist', 'hospital', 'emergency', 'any')),

    -- Migration 30 (2025-10-20): Normalized embeddings for Pass 1.5 search optimization
    normalized_embedding_text TEXT,
    normalized_embedding VECTOR(1536),

    -- Migration 31 (2025-10-21): SapBERT embedding support for PBS medications
    sapbert_embedding VECTOR(768),
    sapbert_embedding_generated_at TIMESTAMPTZ,
    active_embedding_model VARCHAR(20) DEFAULT 'openai' CHECK (active_embedding_model IN ('openai', 'sapbert')),

    -- Unique constraint
    UNIQUE(code_system, code_value, country_code)
);

-- Row Level Security (Migration 25 - 2025-10-15)
ALTER TABLE regional_medical_codes ENABLE ROW LEVEL SECURITY;
ALTER TABLE regional_medical_codes FORCE ROW LEVEL SECURITY;

-- Medical code assignments linking clinical entities to selected codes
CREATE TABLE IF NOT EXISTS medical_code_assignments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),

    -- Entity reference (generic for all clinical tables)
    entity_table VARCHAR(50) NOT NULL CHECK (entity_table IN (
        'patient_medications', 'patient_conditions', 'patient_allergies',
        'patient_vitals', 'patient_immunizations', 'patient_interventions',
        'patient_observations', 'healthcare_encounters', 'healthcare_timeline_events'
    )),
    entity_id UUID NOT NULL,
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,

    -- Universal code assignment (parallel strategy)
    universal_code_system VARCHAR(20),
    universal_code VARCHAR(50),
    universal_grouping_code VARCHAR(50),  -- Two-tier system: optional grouping identifier
    universal_display TEXT,
    universal_confidence DECIMAL(3,2) CHECK (universal_confidence >= 0.0 AND universal_confidence <= 1.0),

    -- Regional code assignment (parallel strategy)
    regional_code_system VARCHAR(20),
    regional_code VARCHAR(50),
    regional_grouping_code VARCHAR(50),   -- Two-tier system: optional grouping identifier
    regional_display TEXT,
    regional_confidence DECIMAL(3,2) CHECK (regional_confidence >= 0.0 AND regional_confidence <= 1.0),
    regional_country_code CHAR(3),

    -- Assignment metadata
    assigned_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    assigned_by_system TEXT DEFAULT 'vector_ai',
    requires_review BOOLEAN DEFAULT FALSE,

    -- Human review and validation
    reviewed_by_user BOOLEAN DEFAULT FALSE,
    reviewed_at TIMESTAMPTZ,
    validation_notes TEXT,

    -- Clinical context
    clinical_context TEXT,
    fallback_identifier TEXT,
    assignment_confidence DECIMAL(3,2) CHECK (assignment_confidence >= 0.0 AND assignment_confidence <= 1.0),

    -- Audit
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    -- Performance constraint
    CONSTRAINT unique_entity_assignment UNIQUE (entity_table, entity_id)
);

-- Medical code assignment indexes for performance
CREATE INDEX IF NOT EXISTS idx_assignments_entity ON medical_code_assignments (entity_table, entity_id);
CREATE INDEX IF NOT EXISTS idx_assignments_patient ON medical_code_assignments (patient_id);
CREATE INDEX IF NOT EXISTS idx_assignments_universal ON medical_code_assignments (universal_code_system, universal_code);
CREATE INDEX IF NOT EXISTS idx_assignments_regional ON medical_code_assignments (regional_code_system, regional_code, regional_country_code);
CREATE INDEX IF NOT EXISTS idx_assignments_universal_grouping ON medical_code_assignments (universal_code_system, universal_grouping_code) WHERE universal_grouping_code IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_assignments_regional_grouping ON medical_code_assignments (regional_code_system, regional_grouping_code, regional_country_code) WHERE regional_grouping_code IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_assignments_review ON medical_code_assignments (requires_review) WHERE requires_review = TRUE;
CREATE INDEX IF NOT EXISTS idx_assignments_fallback ON medical_code_assignments (fallback_identifier) WHERE fallback_identifier IS NOT NULL;

-- Migration 28 (2025-10-17): Embedding tracking and clinical metadata indexes
CREATE INDEX IF NOT EXISTS idx_embedding_batches_lookup ON embedding_batches (code_system, library_version, embedding_model);
CREATE INDEX IF NOT EXISTS idx_regional_codes_batch ON regional_medical_codes (embedding_batch_id) WHERE embedding_batch_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_universal_codes_batch ON universal_medical_codes (embedding_batch_id) WHERE embedding_batch_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_regional_clinical_context ON regional_medical_codes (clinical_specificity, typical_setting) WHERE clinical_specificity IS NOT NULL;

-- Code resolution processing log
CREATE TABLE IF NOT EXISTS code_resolution_log (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,

    -- Processing context
    entity_table VARCHAR(50) NOT NULL,
    entity_id UUID NOT NULL,
    processing_batch_id UUID DEFAULT gen_random_uuid(),

    -- Resolution results
    universal_assigned BOOLEAN DEFAULT FALSE,
    regional_assigned BOOLEAN DEFAULT FALSE,
    fallback_used BOOLEAN DEFAULT FALSE,

    -- Performance metrics
    processing_time_ms INTEGER,
    api_calls_made INTEGER DEFAULT 0,
    total_candidates_found INTEGER DEFAULT 0,

    -- Quality metrics
    confidence_threshold_met BOOLEAN DEFAULT FALSE,
    requires_manual_review BOOLEAN DEFAULT FALSE,
    resolution_quality TEXT CHECK (resolution_quality IN ('high', 'medium', 'low', 'failed')),

    -- Processing details
    processing_errors JSONB DEFAULT '{}',
    candidate_codes JSONB DEFAULT '{}',

    -- Audit
    resolved_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    resolved_by_worker TEXT DEFAULT 'medical_code_resolver'
);

-- =============================================================================
-- SECTION 5: V3 CORE ARCHITECTURE CONSTRAINTS AND INDEXES
-- =============================================================================

-- Add foreign key constraint for patient_clinical_events.encounter_id (idempotent)
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'fk_clinical_events_encounter') THEN
        ALTER TABLE patient_clinical_events 
        ADD CONSTRAINT fk_clinical_events_encounter 
        FOREIGN KEY (encounter_id) REFERENCES healthcare_encounters(id);
    END IF;
END $$;

-- V3 Core Clinical Events indexes (CRITICAL for AI processing performance)
CREATE INDEX IF NOT EXISTS idx_clinical_events_patient ON patient_clinical_events(patient_id) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_clinical_events_activity_type ON patient_clinical_events(activity_type) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_clinical_events_purposes ON patient_clinical_events USING GIN(clinical_purposes) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_clinical_events_date ON patient_clinical_events(patient_id, event_date DESC) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_clinical_events_encounter ON patient_clinical_events(encounter_id) WHERE encounter_id IS NOT NULL AND archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_clinical_events_review ON patient_clinical_events(requires_review) WHERE requires_review = TRUE AND archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_clinical_events_ai_extracted ON patient_clinical_events(ai_extracted, ai_confidence) WHERE ai_extracted = TRUE;
CREATE INDEX IF NOT EXISTS idx_clinical_events_entity ON patient_clinical_events(entity_id) WHERE entity_id IS NOT NULL;

-- V3 Patient Observations indexes
CREATE INDEX IF NOT EXISTS idx_observations_event ON patient_observations(event_id);
CREATE INDEX IF NOT EXISTS idx_observations_type ON patient_observations(observation_type);
CREATE INDEX IF NOT EXISTS idx_observations_interpretation ON patient_observations(interpretation) WHERE interpretation IN ('high', 'low', 'critical', 'abnormal');
CREATE INDEX IF NOT EXISTS idx_observations_ai_review ON patient_observations(requires_review) WHERE requires_review = TRUE;

-- V3 Patient Interventions indexes
CREATE INDEX IF NOT EXISTS idx_interventions_event ON patient_interventions(event_id);
CREATE INDEX IF NOT EXISTS idx_interventions_type ON patient_interventions(intervention_type);
CREATE INDEX IF NOT EXISTS idx_interventions_substance ON patient_interventions(substance_name) WHERE substance_name IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_interventions_ai_review ON patient_interventions(requires_review) WHERE requires_review = TRUE;

-- V3 Healthcare Encounters indexes
CREATE INDEX IF NOT EXISTS idx_encounters_patient ON healthcare_encounters(patient_id) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_encounters_date ON healthcare_encounters(patient_id, encounter_date DESC) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_encounters_type ON healthcare_encounters(encounter_type) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_encounters_provider ON healthcare_encounters USING GIN(to_tsvector('english', provider_name)) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_encounters_ai_extracted ON healthcare_encounters(ai_extracted, ai_confidence) WHERE ai_extracted = TRUE;

-- V3 Timeline Events indexes
CREATE INDEX IF NOT EXISTS idx_timeline_patient ON healthcare_timeline_events(patient_id) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_timeline_date ON healthcare_timeline_events(patient_id, event_date DESC) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_timeline_category ON healthcare_timeline_events(display_category, display_subcategory) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_timeline_major_events ON healthcare_timeline_events(is_major_event, display_priority) WHERE is_major_event = TRUE AND archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_timeline_encounter ON healthcare_timeline_events(encounter_id) WHERE encounter_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_timeline_clinical_events ON healthcare_timeline_events USING GIN(clinical_event_ids) WHERE archived IS NOT TRUE;
CREATE INDEX IF NOT EXISTS idx_timeline_searchable ON healthcare_timeline_events USING GIN(to_tsvector('english', searchable_content)) WHERE archived IS NOT TRUE;

-- =============================================================================
-- SECTION 6: SPECIALIZED TABLES PERFORMANCE INDEXES
-- =============================================================================

-- Note: Medical coding reference indexes removed in migration 06 (vestigial cleanup)
-- medical_condition_codes and medication_reference tables no longer exist

-- Shell files table indexes
CREATE INDEX IF NOT EXISTS idx_shell_files_patient ON shell_files(patient_id);  
CREATE INDEX IF NOT EXISTS idx_shell_files_status ON shell_files(status) WHERE status != 'archived';
CREATE INDEX IF NOT EXISTS idx_shell_files_type ON shell_files(file_type, file_subtype);
CREATE INDEX IF NOT EXISTS idx_shell_files_processing ON shell_files(status, processing_started_at) WHERE status = 'processing';
-- V5 Phase 2 indexes for job coordination
CREATE UNIQUE INDEX IF NOT EXISTS idx_shell_files_idempotency_key ON shell_files(idempotency_key) WHERE idempotency_key IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_shell_files_job_id ON shell_files(processing_job_id) WHERE processing_job_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_shell_files_worker ON shell_files(processing_worker_id) WHERE processing_worker_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_shell_files_priority ON shell_files(processing_priority) WHERE status IN ('uploaded', 'processing');

-- Patient conditions indexes
CREATE INDEX IF NOT EXISTS idx_conditions_patient ON patient_conditions(patient_id) WHERE archived_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_conditions_status ON patient_conditions(patient_id, status);
CREATE INDEX IF NOT EXISTS idx_conditions_code ON patient_conditions(condition_code, condition_system);
CREATE INDEX IF NOT EXISTS idx_conditions_diagnosed_date ON patient_conditions(patient_id, diagnosed_date DESC);
CREATE INDEX IF NOT EXISTS idx_conditions_ai_review ON patient_conditions(requires_review) WHERE requires_review = true;

-- Patient allergies indexes
CREATE INDEX IF NOT EXISTS idx_allergies_patient ON patient_allergies(patient_id) WHERE archived_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_allergies_type ON patient_allergies(allergen_type, severity);
CREATE INDEX IF NOT EXISTS idx_allergies_status ON patient_allergies(patient_id, status) WHERE status = 'active';
CREATE INDEX IF NOT EXISTS idx_allergies_ai_review ON patient_allergies(requires_review) WHERE requires_review = true;

-- Patient vitals indexes
CREATE INDEX IF NOT EXISTS idx_vitals_patient ON patient_vitals(patient_id) WHERE archived_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_vitals_type_date ON patient_vitals(patient_id, vital_type, measurement_date DESC);
CREATE INDEX IF NOT EXISTS idx_vitals_abnormal ON patient_vitals(patient_id, is_abnormal) WHERE is_abnormal = true;
CREATE INDEX IF NOT EXISTS idx_vitals_ai_review ON patient_vitals(requires_review) WHERE requires_review = true;

-- Patient immunizations indexes
CREATE INDEX IF NOT EXISTS idx_immunizations_patient ON patient_immunizations(patient_id) WHERE archived_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_immunizations_vaccine ON patient_immunizations(vaccine_name, administration_date DESC);
CREATE INDEX IF NOT EXISTS idx_immunizations_date ON patient_immunizations(patient_id, administration_date DESC);
CREATE INDEX IF NOT EXISTS idx_immunizations_validation ON patient_immunizations(clinical_validation_status) WHERE clinical_validation_status != 'validated';

-- Patient medications indexes
CREATE INDEX IF NOT EXISTS idx_medications_patient ON patient_medications(patient_id) WHERE archived_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_medications_status ON patient_medications(patient_id, status) WHERE status = 'active';
CREATE INDEX IF NOT EXISTS idx_medications_dates ON patient_medications(patient_id, start_date DESC, end_date DESC);
CREATE INDEX IF NOT EXISTS idx_medications_ai_review ON patient_medications(requires_review) WHERE requires_review = true;

-- =============================================================================
-- SECTION 6: ROW LEVEL SECURITY POLICIES
-- =============================================================================

-- Enable RLS on V3 core clinical tables
ALTER TABLE patient_clinical_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_observations ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_interventions ENABLE ROW LEVEL SECURITY;
ALTER TABLE healthcare_encounters ENABLE ROW LEVEL SECURITY;
ALTER TABLE healthcare_timeline_events ENABLE ROW LEVEL SECURITY;

-- Note: RLS enables for medical_condition_codes and medication_reference removed in migration 06
-- These tables no longer exist (vestigial cleanup)
ALTER TABLE shell_files ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_conditions ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_allergies ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_vitals ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_immunizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE patient_medications ENABLE ROW LEVEL SECURITY;

-- V3 Core Clinical Tables - profile-based access using has_profile_access()
CREATE POLICY clinical_events_access ON patient_clinical_events
    FOR ALL TO authenticated
    USING (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    )
    WITH CHECK (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    );

CREATE POLICY observations_access ON patient_observations
    FOR ALL TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM patient_clinical_events pce
            WHERE pce.id = patient_observations.event_id
            AND (has_profile_access(auth.uid(), pce.patient_id) OR is_admin())
        )
    )
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM patient_clinical_events pce
            WHERE pce.id = patient_observations.event_id
            AND (has_profile_access(auth.uid(), pce.patient_id) OR is_admin())
        )
    );

CREATE POLICY interventions_access ON patient_interventions
    FOR ALL TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM patient_clinical_events pce
            WHERE pce.id = patient_interventions.event_id
            AND (has_profile_access(auth.uid(), pce.patient_id) OR is_admin())
        )
    )
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM patient_clinical_events pce
            WHERE pce.id = patient_interventions.event_id
            AND (has_profile_access(auth.uid(), pce.patient_id) OR is_admin())
        )
    );

CREATE POLICY encounters_access ON healthcare_encounters
    FOR ALL TO authenticated
    USING (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    )
    WITH CHECK (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    );

CREATE POLICY timeline_events_access ON healthcare_timeline_events
    FOR ALL TO authenticated
    USING (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    )
    WITH CHECK (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    );

-- Note: RLS policies for medical_condition_codes and medication_reference removed in migration 06
-- These tables no longer exist (vestigial cleanup)

-- Shell files table - profile-based access using has_profile_access()
CREATE POLICY shell_files_access ON shell_files
    FOR ALL TO authenticated
    USING (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    )
    WITH CHECK (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    );

-- Patient conditions - profile-based access
CREATE POLICY patient_conditions_access ON patient_conditions
    FOR ALL TO authenticated
    USING (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    )
    WITH CHECK (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    );

-- Patient allergies - profile-based access
CREATE POLICY patient_allergies_access ON patient_allergies
    FOR ALL TO authenticated
    USING (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    )
    WITH CHECK (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    );

-- Patient vitals - profile-based access
CREATE POLICY patient_vitals_access ON patient_vitals
    FOR ALL TO authenticated
    USING (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    )
    WITH CHECK (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    );

-- Patient immunizations - profile-based access
CREATE POLICY patient_immunizations_access ON patient_immunizations
    FOR ALL TO authenticated
    USING (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    )
    WITH CHECK (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    );

-- Patient medications - profile-based access
CREATE POLICY patient_medications_access ON patient_medications
    FOR ALL TO authenticated
    USING (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    )
    WITH CHECK (
        has_profile_access(auth.uid(), patient_id)
        OR is_admin()
    );

-- =============================================================================
-- SECTION 7: CLINICAL DATA UTILITY FUNCTIONS
-- =============================================================================

-- Get patient's active conditions
CREATE OR REPLACE FUNCTION get_patient_active_conditions(p_patient_id UUID)
RETURNS TABLE(
    condition_id UUID,
    condition_name TEXT,
    severity TEXT,
    diagnosed_date DATE,
    condition_code TEXT
) LANGUAGE plpgsql SECURITY DEFINER AS $$
BEGIN
    -- Verify profile access
    IF NOT has_profile_access(auth.uid(), p_patient_id) AND NOT is_admin() THEN
        RAISE EXCEPTION 'Access denied to profile data';
    END IF;
    
    RETURN QUERY
    SELECT 
        pc.id,
        pc.condition_name,
        pc.severity,
        pc.diagnosed_date,
        pc.condition_code
    FROM patient_conditions pc
    WHERE pc.patient_id = p_patient_id
    AND pc.status = 'active'
    AND pc.archived_at IS NULL
    ORDER BY pc.diagnosed_date DESC;
END $$;

-- Get patient's medication list
CREATE OR REPLACE FUNCTION get_patient_medications(p_patient_id UUID, p_active_only BOOLEAN DEFAULT TRUE)
RETURNS TABLE(
    medication_id UUID,
    medication_name TEXT,
    strength TEXT,
    frequency TEXT,
    status TEXT,
    start_date DATE
) LANGUAGE plpgsql SECURITY DEFINER AS $$
BEGIN
    -- Verify profile access
    IF NOT has_profile_access(auth.uid(), p_patient_id) AND NOT is_admin() THEN
        RAISE EXCEPTION 'Access denied to profile data';
    END IF;
    
    RETURN QUERY
    SELECT 
        pm.id,
        pm.medication_name,
        pm.strength,
        pm.frequency,
        pm.status,
        pm.start_date
    FROM patient_medications pm
    WHERE pm.patient_id = p_patient_id
    AND (NOT p_active_only OR pm.status = 'active')
    AND pm.archived_at IS NULL
    ORDER BY pm.start_date DESC;
END $$;

-- =============================================================================
-- SECTION 8: DEPLOYMENT VERIFICATION AND SUCCESS REPORTING
-- =============================================================================

-- Verify deployment success
DO $$
DECLARE
    table_count INTEGER;
    index_count INTEGER;
    policy_count INTEGER;
    function_count INTEGER;
BEGIN
    -- Count created tables (V3 Core + Supplementary + Migration Additions)
    SELECT COUNT(*) INTO table_count
    FROM information_schema.tables
    WHERE table_schema = 'public'
    AND table_name IN (
        -- V3 Core Architecture (CRITICAL)
        'patient_clinical_events', 'patient_observations', 'patient_interventions',
        'healthcare_encounters', 'healthcare_timeline_events',
        -- Reference Tables (Note: medical_condition_codes, medication_reference removed in migration 06)
        'shell_files',
        -- Specialized Clinical Tables
        'patient_conditions', 'patient_allergies', 'patient_vitals',
        'patient_immunizations', 'patient_medications',
        -- Narrative System (V3 + Migration 03)
        'clinical_narratives', 'narrative_event_links',
        'narrative_source_mappings', 'narrative_relationships',
        -- Temporal Data Management (Migration 02)
        'temporal_audit_log', 'identity_audit_log', 'temporal_processing_log',
        -- Medical Code Resolution (Migration 04)
        'universal_medical_codes', 'regional_medical_codes',
        'medical_code_assignments', 'code_resolution_log'
    );
    
    -- Count created indexes (V3 Core + Supplementary)
    SELECT COUNT(*) INTO index_count
    FROM pg_indexes 
    WHERE schemaname = 'public' 
    AND (indexname LIKE 'idx_clinical_events%'
    OR indexname LIKE 'idx_observations%'
    OR indexname LIKE 'idx_interventions%'
    OR indexname LIKE 'idx_encounters%'
    OR indexname LIKE 'idx_timeline%'
    OR indexname LIKE 'idx_medical%'
    OR indexname LIKE 'idx_shell_files%'
    OR indexname LIKE 'idx_conditions%'
    OR indexname LIKE 'idx_allergies%'
    OR indexname LIKE 'idx_vitals%'
    OR indexname LIKE 'idx_immunizations%'
    OR indexname LIKE 'idx_medications%');
    
    -- Count RLS policies (V3 Core + Supplementary)
    SELECT COUNT(*) INTO policy_count
    FROM pg_policies 
    WHERE schemaname = 'public' 
    AND tablename IN (
        -- V3 Core Architecture
        'patient_clinical_events', 'patient_observations', 'patient_interventions',
        'healthcare_encounters', 'healthcare_timeline_events',
        -- Reference and Specialized Tables (Note: medical_condition_codes, medication_reference removed in migration 06)
        'shell_files',
        'patient_conditions', 'patient_allergies', 'patient_vitals',
        'patient_immunizations', 'patient_medications'
    );
    
    -- Count utility functions
    SELECT COUNT(*) INTO function_count
    FROM information_schema.routines
    WHERE routine_schema = 'public'
    AND routine_name IN ('get_patient_active_conditions', 'get_patient_medications');
    
    IF table_count >= 27 AND index_count >= 30 AND policy_count >= 13 AND function_count = 2 THEN
        RAISE NOTICE '';
        RAISE NOTICE '=================================================================================';
        RAISE NOTICE 'V3 CLINICAL CORE + MIGRATION INTEGRATION - DEPLOYMENT SUCCESS';
        RAISE NOTICE '=================================================================================';
        RAISE NOTICE '';
        RAISE NOTICE 'V3 CORE ARCHITECTURE DEPLOYED:';
        RAISE NOTICE '  patient_clinical_events - Central clinical events with O3 classification';
        RAISE NOTICE '  patient_observations - Observation details (vital signs, lab results)';
        RAISE NOTICE '  patient_interventions - Intervention details (medications, procedures)';
        RAISE NOTICE '  healthcare_encounters - Provider and encounter context';
        RAISE NOTICE '  healthcare_timeline_events - UI timeline display optimization';
        RAISE NOTICE '';
        RAISE NOTICE 'MIGRATION 02 - TEMPORAL DATA MANAGEMENT INTEGRATED:';
        RAISE NOTICE '  All clinical tables enhanced with temporal columns (valid_from, valid_to, is_current)';
        RAISE NOTICE '  Deduplication system with clinical_identity_key columns';
        RAISE NOTICE '  Audit tables: temporal_audit_log, identity_audit_log, temporal_processing_log';
        RAISE NOTICE '  Analytics: temporal_data_summary materialized view';
        RAISE NOTICE '';
        RAISE NOTICE 'MIGRATION 03 - NARRATIVE ARCHITECTURE INTEGRATED:';
        RAISE NOTICE '  clinical_narratives enhanced with vector embeddings (VECTOR(1536))';
        RAISE NOTICE '  Narrative versioning: is_current, supersedes_id, content_fingerprint';
        RAISE NOTICE '  Relationship system: narrative_relationships, narrative_event_links';
        RAISE NOTICE '  Semantic search ready with pgvector support';
        RAISE NOTICE '';
        RAISE NOTICE 'MIGRATION 04 - MEDICAL CODE RESOLUTION INTEGRATED:';
        RAISE NOTICE '  Universal medical codes: rxnorm, snomed, loinc with vector search';
        RAISE NOTICE '  Regional medical codes: pbs, mbs, icd10_am with country-specific data';
        RAISE NOTICE '  Assignment system: medical_code_assignments with confidence scoring';
        RAISE NOTICE '  Processing logs: code_resolution_log for audit and performance';
        RAISE NOTICE '';
        RAISE NOTICE 'COMPREHENSIVE COMPONENTS DEPLOYED:';
        RAISE NOTICE '  - % total tables (V3 core + specialized + temporal + narrative + code resolution)', table_count;
        RAISE NOTICE '  - % performance indexes optimized for AI processing', index_count;
        RAISE NOTICE '  - % RLS policies using has_profile_access()', policy_count;
        RAISE NOTICE '  - % clinical utility functions', function_count;
        RAISE NOTICE '';
        RAISE NOTICE 'MEDICAL CODING FOUNDATION:';
        RAISE NOTICE '  - ICD-10 and SNOMED-CT reference tables ready';
        RAISE NOTICE '  - Australian PBS and Medicare integration prepared';
        RAISE NOTICE '  - Medication reference database established';
        RAISE NOTICE '';
        RAISE NOTICE 'AI PROCESSING V3 INTEGRATION READY:';
        RAISE NOTICE '  - O3 two-axis classification system operational';
        RAISE NOTICE '  - Entity-to-schema mapping fully supported';
        RAISE NOTICE '  - Pass 1 & Pass 2 AI processing pipeline enabled';
        RAISE NOTICE '  - Russian Babushka Doll contextual layering implemented';
        RAISE NOTICE '';
        RAISE NOTICE 'HEALTHCARE TIMELINE & UI FEATURES:';
        RAISE NOTICE '  - Timeline events with hierarchical categorization';
        RAISE NOTICE '  - Click-to-zoom clinical context navigation';
        RAISE NOTICE '  - AI chatbot query optimization ready';
        RAISE NOTICE '  - Multi-level filtering and display priority';
        RAISE NOTICE '';
        RAISE NOTICE 'ARCHITECTURAL ACHIEVEMENTS:';
        RAISE NOTICE '  - Blueprint Issues #38 ID system: RESOLVED';
        RAISE NOTICE '  - V3 AI processing pipeline: ENABLED';
        RAISE NOTICE '  - Profile access security: IMPLEMENTED';
        RAISE NOTICE '  - Cross-profile contamination: PREVENTED';
        RAISE NOTICE '  - Healthcare compliance: ENFORCED';
        RAISE NOTICE '';
        RAISE NOTICE 'Ready for: 04_ai_processing.sql (with V3 core table references)';
        RAISE NOTICE '';
    ELSE
        RAISE WARNING 'V3 clinical core deployment incomplete:';
        RAISE WARNING '  - Tables: %/13, Indexes: %/30, Policies: %/13, Functions: %/2', 
            table_count, index_count, policy_count, function_count;
    END IF;
END $$;

-- =============================================================================
-- 4E. VECTOR SEARCH FUNCTIONS FOR MEDICAL CODE RESOLUTION (From Migration 04)
-- =============================================================================

-- Vector similarity search for universal codes
CREATE OR REPLACE FUNCTION search_universal_codes(
    query_embedding VECTOR(1536),
    entity_type_filter VARCHAR(20) DEFAULT NULL,
    max_results INTEGER DEFAULT 10,
    min_similarity REAL DEFAULT 0.7
) RETURNS TABLE (
    code_system VARCHAR(20),
    code_value VARCHAR(50),
    display_name TEXT,
    search_text TEXT,
    similarity_score REAL,
    entity_type VARCHAR(20)
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        umc.code_system,
        umc.code_value,
        umc.display_name,
        umc.search_text,
        (1 - (umc.embedding <=> query_embedding))::REAL as similarity_score,
        umc.entity_type
    FROM universal_medical_codes umc
    WHERE umc.active = TRUE
        AND umc.embedding IS NOT NULL
        AND (entity_type_filter IS NULL OR umc.entity_type = entity_type_filter)
        AND (1 - (umc.embedding <=> query_embedding)) >= min_similarity
    ORDER BY umc.embedding <=> query_embedding
    LIMIT max_results;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, pg_temp;

-- Vector similarity search for regional codes
CREATE OR REPLACE FUNCTION search_regional_codes(
    query_embedding VECTOR(1536),
    entity_type_filter VARCHAR(20) DEFAULT NULL,
    country_code_filter CHAR(3) DEFAULT 'AUS',
    max_results INTEGER DEFAULT 10,
    min_similarity REAL DEFAULT 0.3
) RETURNS TABLE (
    code_system VARCHAR(20),
    code_value VARCHAR(50),
    display_name TEXT,
    search_text TEXT,
    similarity_score REAL,
    entity_type VARCHAR(20),
    country_code CHAR(3),
    authority_required BOOLEAN
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        rmc.code_system,
        rmc.code_value,
        rmc.display_name,
        rmc.search_text,
        (1 - (rmc.embedding <=> query_embedding))::REAL as similarity_score,
        rmc.entity_type,
        rmc.country_code,
        rmc.authority_required
    FROM regional_medical_codes rmc
    WHERE rmc.active = TRUE
        AND rmc.embedding IS NOT NULL
        AND (entity_type_filter IS NULL OR rmc.entity_type = entity_type_filter)
        AND (country_code_filter IS NULL OR rmc.country_code = country_code_filter)
        AND (1 - (rmc.embedding <=> query_embedding)) >= min_similarity
    ORDER BY rmc.embedding <=> query_embedding
    LIMIT max_results;
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER SET search_path = public, pg_temp;

-- ============================================================================
-- Hybrid Search for MBS Procedure Codes (Migration 33 - 2025-10-23)
-- ============================================================================
-- Purpose: Pure lexical keyword match-count ranking for MBS procedure matching
-- Strategy: Count matching search variants, rank by coverage (Phase 1)
-- History:
--   - Migration 32 (2025-10-22): Initial hybrid (70% lexical positional + 30% semantic)
--   - Migration 33 (2025-10-23): Replaced with match-count, removed semantic (Phase 1)
-- Validated: Experiment 6 target ≥90% top-20 accuracy
-- Used by: Pass 1.5 procedure code matching pipeline

CREATE OR REPLACE FUNCTION search_procedures_hybrid(
    p_entity_text TEXT,
    p_search_variants TEXT[],
    p_country_code CHAR(3) DEFAULT 'AUS',
    p_limit INTEGER DEFAULT 20
)
RETURNS TABLE (
    code_value VARCHAR(50),
    display_name TEXT,
    lexical_score NUMERIC,
    semantic_score NUMERIC,
    combined_score NUMERIC,
    match_source TEXT,
    code_system VARCHAR(20),
    search_text TEXT
) AS $$
DECLARE
    v_query_embedding VECTOR(1536);
    v_variant_count INTEGER;
    v_normalized_variants TEXT[];
BEGIN
    -- Step 0: Validate and normalize inputs
    IF p_search_variants IS NULL OR array_length(p_search_variants, 1) = 0 THEN
        RAISE EXCEPTION 'search_variants array is required and must not be empty';
    END IF;

    IF p_entity_text IS NULL OR trim(p_entity_text) = '' THEN
        RAISE EXCEPTION 'p_entity_text is required and must not be empty';
    END IF;

    -- Normalize: trim whitespace from all variants to prevent accidental mismatches
    SELECT array_agg(trim(v)) INTO v_normalized_variants
    FROM unnest(p_search_variants) AS v;

    -- Enforce 5-variant cap (silent truncation to match documented max)
    IF array_length(v_normalized_variants, 1) > 5 THEN
        v_normalized_variants := v_normalized_variants[1:5];
    END IF;

    v_variant_count := array_length(v_normalized_variants, 1);

    -- Step 1: Get embedding for semantic phase
    -- TODO (Phase 2): Pass precomputed entity embedding from Pass 1 to eliminate proxy bias
    -- Current approach uses FIRST matching code's embedding as proxy for semantic reranking
    -- This is acceptable for Phase 1 (semantic only 30% weight, lexical already filtered)
    SELECT rmc.embedding INTO v_query_embedding
    FROM regional_medical_codes rmc
    WHERE rmc.code_system = 'mbs'
        AND rmc.country_code = p_country_code
        AND rmc.active = TRUE
        AND rmc.entity_type = 'procedure'
        AND rmc.embedding IS NOT NULL
        AND (
            rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[1] || '%' OR
            rmc.normalized_embedding_text ILIKE '%' || p_entity_text || '%'
        )
    LIMIT 1;

    -- If no embedding found, fall back to zero vector (lexical-only mode)
    IF v_query_embedding IS NULL THEN
        v_query_embedding := array_fill(0::float4, ARRAY[1536])::VECTOR(1536);
    END IF;

    -- Step 2: Lexical matching with variant scoring
    -- Earlier variants get higher scores (assume AI ranks by relevance)
    RETURN QUERY
    WITH lexical_matches AS (
        SELECT
            rmc.code_value AS l_code_value,
            rmc.display_name AS l_display_name,
            rmc.code_system AS l_code_system,
            rmc.search_text AS l_search_text,
            rmc.embedding AS l_embedding,
            -- Score based on which variant matched (1.0 for first, 0.8 for last)
            GREATEST(
                CASE WHEN rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[1] || '%' THEN 1.00 ELSE 0 END,
                CASE WHEN v_variant_count >= 2 AND rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[2] || '%' THEN 0.95 ELSE 0 END,
                CASE WHEN v_variant_count >= 3 AND rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[3] || '%' THEN 0.90 ELSE 0 END,
                CASE WHEN v_variant_count >= 4 AND rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[4] || '%' THEN 0.85 ELSE 0 END,
                CASE WHEN v_variant_count >= 5 AND rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[5] || '%' THEN 0.80 ELSE 0 END
            )::NUMERIC AS l_raw_lexical_score
        FROM regional_medical_codes rmc
        WHERE rmc.code_system = 'mbs'
            AND rmc.country_code = p_country_code
            AND rmc.active = TRUE
            AND rmc.entity_type = 'procedure'
            AND (
                rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[1] || '%' OR
                (v_variant_count >= 2 AND rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[2] || '%') OR
                (v_variant_count >= 3 AND rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[3] || '%') OR
                (v_variant_count >= 4 AND rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[4] || '%') OR
                (v_variant_count >= 5 AND rmc.normalized_embedding_text ILIKE '%' || v_normalized_variants[5] || '%')
            )
    ),

    -- Step 3: Semantic reranking on lexical candidates
    semantic_rerank AS (
        SELECT
            lm.l_code_value AS s_code_value,
            lm.l_display_name AS s_display_name,
            lm.l_code_system AS s_code_system,
            lm.l_search_text AS s_search_text,
            lm.l_raw_lexical_score AS s_raw_lexical_score,
            -- Cosine similarity (1 - distance)
            (CASE
                WHEN lm.l_embedding IS NOT NULL
                THEN GREATEST(0, 1 - (lm.l_embedding <=> v_query_embedding))
                ELSE 0
            END)::NUMERIC AS s_raw_semantic_score
        FROM lexical_matches lm
        WHERE lm.l_raw_lexical_score > 0
    ),

    -- Step 4: Normalize and combine scores
    normalized_scores AS (
        SELECT
            sr.s_code_value AS n_code_value,
            sr.s_display_name AS n_display_name,
            sr.s_code_system AS n_code_system,
            sr.s_search_text AS n_search_text,
            -- Normalize lexical score (already 0-1 range from variant scoring)
            sr.s_raw_lexical_score AS n_norm_lexical,
            -- Normalize semantic score (0-1 range)
            (CASE
                WHEN MAX(sr.s_raw_semantic_score) OVER () > 0
                THEN sr.s_raw_semantic_score / NULLIF(MAX(sr.s_raw_semantic_score) OVER (), 0)
                ELSE 0
            END)::NUMERIC AS n_norm_semantic
        FROM semantic_rerank sr
    )

    -- Final weighted combination: 70% lexical + 30% semantic
    SELECT
        ns.n_code_value,
        ns.n_display_name,
        ns.n_norm_lexical,
        ns.n_norm_semantic,
        (ns.n_norm_lexical * 0.70 + ns.n_norm_semantic * 0.30)::NUMERIC,
        CASE
            WHEN ns.n_norm_lexical >= 0.9 THEN 'lexical_primary'
            WHEN ns.n_norm_semantic >= 0.8 THEN 'semantic_primary'
            ELSE 'hybrid'
        END,
        ns.n_code_system,
        ns.n_search_text
    FROM normalized_scores ns
    ORDER BY (ns.n_norm_lexical * 0.70 + ns.n_norm_semantic * 0.30) DESC
    LIMIT p_limit;

END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER SET search_path = public, pg_temp;

COMMENT ON FUNCTION search_procedures_hybrid(TEXT, TEXT[], CHAR(3), INTEGER) IS
'Hybrid search for MBS procedure codes using AI-generated search variants.
Strategy: Lexical matching (70%) + Semantic reranking (30%)
Validated: Experiment 5 (October 2025) - OpenAI pure vector insufficient
Usage: Pass 1.5 procedure code matching (replaces pure vector search)
Example:
  SELECT * FROM search_procedures_hybrid(
    ''Chest X-ray'',
    ARRAY[''chest x-ray'', ''chest radiography'', ''CXR'', ''thoracic radiograph'', ''lung fields x-ray''],
    ''AUS'',
    20
  );';

REVOKE ALL ON FUNCTION search_procedures_hybrid(TEXT, TEXT[], CHAR(3), INTEGER) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION search_procedures_hybrid(TEXT, TEXT[], CHAR(3), INTEGER) TO service_role;

-- Query assigned medical codes with RLS enforcement
CREATE OR REPLACE FUNCTION get_entity_medical_codes(
    p_entity_table VARCHAR(50),
    p_entity_id UUID
) RETURNS TABLE (
    universal_code_system VARCHAR(20),
    universal_code VARCHAR(50),
    universal_display TEXT,
    universal_confidence DECIMAL(3,2),
    regional_code_system VARCHAR(20),
    regional_code VARCHAR(50),
    regional_display TEXT,
    regional_confidence DECIMAL(3,2),
    regional_country_code CHAR(3),
    fallback_identifier TEXT,
    assigned_at TIMESTAMPTZ
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        mca.universal_code_system,
        mca.universal_code,
        mca.universal_display,
        mca.universal_confidence,
        mca.regional_code_system,
        mca.regional_code,
        mca.regional_display,
        mca.regional_confidence,
        mca.regional_country_code,
        mca.fallback_identifier,
        mca.assigned_at
    FROM medical_code_assignments mca
    WHERE mca.entity_table = p_entity_table
        AND mca.entity_id = p_entity_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, pg_temp;

COMMIT;

-- =============================================================================
-- MIGRATION 08 AUDIT TRACKING
-- =============================================================================

-- Audit table for tracking synthetic events created during hub-and-spoke migration
-- Created by: Migration 08 (2025-09-30_08_enforce_hub_spoke_architecture.sql)
-- Purpose: Track which clinical records required synthetic patient_clinical_events backfill
CREATE TABLE IF NOT EXISTS migration_08_backfill_audit (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    source_table TEXT NOT NULL,
    source_record_id UUID NOT NULL,
    created_event_id UUID NOT NULL,
    backfill_timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    backfill_reason TEXT
);

-- Row Level Security (Migration 25 - 2025-10-15)
ALTER TABLE migration_08_backfill_audit ENABLE ROW LEVEL SECURITY;
ALTER TABLE migration_08_backfill_audit FORCE ROW LEVEL SECURITY;

-- =============================================================================
-- FRESH START BLUEPRINT: 03_clinical_core.sql COMPLETE
-- =============================================================================

\echo ''
\echo '03_clinical_core.sql - CLINICAL DATA FOUNDATION'
\echo 'Components:'
\echo '- Medical Coding Reference Tables (ICD-10, SNOMED-CT, PBS)'
\echo '- Core Clinical Tables (Shell_files, Conditions, Allergies, Vitals)'
\echo '- V3 Enhanced Tables (Immunizations, Medications)'
\echo '- Profile-Based Security with has_profile_access()'
\echo '- AI Processing V3 Integration Ready'
\echo ''
\echo 'CRITICAL FIXES APPLIED:'
\echo '  All patient_id columns now correctly reference user_profiles(id)'
\echo '  Blueprint ID system misalignments completely resolved'
\echo ''
\echo 'Next step: Run 04_ai_processing.sql'